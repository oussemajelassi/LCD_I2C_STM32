
LCD_I2C_STM32_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f80  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003228  08003228  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003228  08003228  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003228  08003228  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003228  08003228  00013228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000010  08003240  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400007c  08003240  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d380  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb4  00000000  00000000  0002d3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002ef78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002fa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037d2b  00000000  00000000  00030450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d849  00000000  00000000  0006817b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00170f9d  00000000  00000000  000759c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e6961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  001e69b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003200 	.word	0x08003200

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003200 	.word	0x08003200

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800040a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800040e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000410:	bf00      	nop
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <main+0x94>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <main+0x24>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	dcf4      	bgt.n	8000412 <main+0xe>
  if ( timeout < 0 )
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da01      	bge.n	8000432 <main+0x2e>
  {
  Error_Handler();
 800042e:	f000 f8f9 	bl	8000624 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 f9cf 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f831 	bl	800049c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <main+0x94>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000440:	4a15      	ldr	r2, [pc, #84]	; (8000498 <main+0x94>)
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <main+0x94>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fced 	bl	8000e38 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800045e:	2100      	movs	r1, #0
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fd03 	bl	8000e6c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800046c:	bf00      	nop
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <main+0x94>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <main+0x80>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	dcf4      	bgt.n	800046e <main+0x6a>
if ( timeout < 0 )
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b00      	cmp	r3, #0
 8000488:	da01      	bge.n	800048e <main+0x8a>
{
Error_Handler();
 800048a:	f000 f8cb 	bl	8000624 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f8af 	bl	80005f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000492:	f000 f86d 	bl	8000570 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000496:	e7fe      	b.n	8000496 <main+0x92>
 8000498:	58024400 	.word	0x58024400

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b09c      	sub	sp, #112	; 0x70
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a6:	224c      	movs	r2, #76	; 0x4c
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 fea0 	bl	80031f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2220      	movs	r2, #32
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f002 fe9a 	bl	80031f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004bc:	2004      	movs	r0, #4
 80004be:	f000 fe11 	bl	80010e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004c2:	2300      	movs	r3, #0
 80004c4:	603b      	str	r3, [r7, #0]
 80004c6:	4b28      	ldr	r3, [pc, #160]	; (8000568 <SystemClock_Config+0xcc>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	4a27      	ldr	r2, [pc, #156]	; (8000568 <SystemClock_Config+0xcc>)
 80004cc:	f023 0301 	bic.w	r3, r3, #1
 80004d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <SystemClock_Config+0xcc>)
 80004d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	4b23      	ldr	r3, [pc, #140]	; (800056c <SystemClock_Config+0xd0>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004e4:	4a21      	ldr	r2, [pc, #132]	; (800056c <SystemClock_Config+0xd0>)
 80004e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b1f      	ldr	r3, [pc, #124]	; (800056c <SystemClock_Config+0xd0>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004f8:	bf00      	nop
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <SystemClock_Config+0xd0>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000506:	d1f8      	bne.n	80004fa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000508:	2302      	movs	r3, #2
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800050c:	2301      	movs	r3, #1
 800050e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000510:	2340      	movs	r3, #64	; 0x40
 8000512:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000514:	2300      	movs	r3, #0
 8000516:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fe3b 	bl	8001198 <HAL_RCC_OscConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000528:	f000 f87c 	bl	8000624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	233f      	movs	r3, #63	; 0x3f
 800052e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000540:	2340      	movs	r3, #64	; 0x40
 8000542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2101      	movs	r1, #1
 8000550:	4618      	mov	r0, r3
 8000552:	f001 fa4f 	bl	80019f4 <HAL_RCC_ClockConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800055c:	f000 f862 	bl	8000624 <Error_Handler>
  }
}
 8000560:	bf00      	nop
 8000562:	3770      	adds	r7, #112	; 0x70
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	58000400 	.word	0x58000400
 800056c:	58024800 	.word	0x58024800

08000570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000574:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_I2C1_Init+0x74>)
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <MX_I2C1_Init+0x78>)
 8000578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_I2C1_Init+0x74>)
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <MX_I2C1_Init+0x7c>)
 800057e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <MX_I2C1_Init+0x74>)
 8000588:	2201      	movs	r2, #1
 800058a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000592:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <MX_I2C1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005ac:	f000 fc72 	bl	8000e94 <HAL_I2C_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005b6:	f000 f835 	bl	8000624 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005be:	f000 fcf9 	bl	8000fb4 <HAL_I2CEx_ConfigAnalogFilter>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005c8:	f000 f82c 	bl	8000624 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005cc:	2100      	movs	r1, #0
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_I2C1_Init+0x74>)
 80005d0:	f000 fd3b 	bl	800104a <HAL_I2CEx_ConfigDigitalFilter>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005da:	f000 f823 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2400002c 	.word	0x2400002c
 80005e8:	40005400 	.word	0x40005400
 80005ec:	00707cbb 	.word	0x00707cbb

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_GPIO_Init+0x30>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <MX_GPIO_Init+0x30>)
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_GPIO_Init+0x30>)
 8000608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	58024400 	.word	0x58024400

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_MspInit+0x30>)
 8000638:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800063c:	4a08      	ldr	r2, [pc, #32]	; (8000660 <HAL_MspInit+0x30>)
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_MspInit+0x30>)
 8000648:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	58024400 	.word	0x58024400

08000664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0b8      	sub	sp, #224	; 0xe0
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	22bc      	movs	r2, #188	; 0xbc
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fdb3 	bl	80031f0 <memset>
  if(hi2c->Instance==I2C1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a24      	ldr	r2, [pc, #144]	; (8000720 <HAL_I2C_MspInit+0xbc>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d141      	bne.n	8000718 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000694:	2308      	movs	r3, #8
 8000696:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fcd6 	bl	8002054 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80006ae:	f7ff ffb9 	bl	8000624 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <HAL_I2C_MspInit+0xc0>)
 80006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <HAL_I2C_MspInit+0xc0>)
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_I2C_MspInit+0xc0>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d0:	23c0      	movs	r3, #192	; 0xc0
 80006d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d6:	2312      	movs	r3, #18
 80006d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006dc:	2301      	movs	r3, #1
 80006de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e8:	2304      	movs	r3, #4
 80006ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <HAL_I2C_MspInit+0xc4>)
 80006f6:	f000 f9ef 	bl	8000ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_I2C_MspInit+0xc0>)
 80006fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000700:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_I2C_MspInit+0xc0>)
 8000702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000706:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_I2C_MspInit+0xc0>)
 800070c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	37e0      	adds	r7, #224	; 0xe0
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40005400 	.word	0x40005400
 8000724:	58024400 	.word	0x58024400
 8000728:	58020400 	.word	0x58020400

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 f89e 	bl	80008b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000784:	f7ff fda8 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	; (80007cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f002 fcfb 	bl	80031a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b2:	f7ff fe27 	bl	8000404 <main>
  bx  lr
 80007b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007c0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80007c4:	08003230 	.word	0x08003230
  ldr r2, =_sbss
 80007c8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80007cc:	2400007c 	.word	0x2400007c

080007d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC3_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007da:	2003      	movs	r0, #3
 80007dc:	f000 f94a 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007e0:	f001 fabe 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 80007e4:	4602      	mov	r2, r0
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_Init+0x68>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	0a1b      	lsrs	r3, r3, #8
 80007ec:	f003 030f 	and.w	r3, r3, #15
 80007f0:	4913      	ldr	r1, [pc, #76]	; (8000840 <HAL_Init+0x6c>)
 80007f2:	5ccb      	ldrb	r3, [r1, r3]
 80007f4:	f003 031f 	and.w	r3, r3, #31
 80007f8:	fa22 f303 	lsr.w	r3, r2, r3
 80007fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_Init+0x68>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <HAL_Init+0x6c>)
 8000808:	5cd3      	ldrb	r3, [r2, r3]
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	fa22 f303 	lsr.w	r3, r2, r3
 8000814:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <HAL_Init+0x70>)
 8000816:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000818:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <HAL_Init+0x74>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800081e:	200f      	movs	r0, #15
 8000820:	f000 f814 	bl	800084c <HAL_InitTick>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e002      	b.n	8000834 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800082e:	f7ff feff 	bl	8000630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	58024400 	.word	0x58024400
 8000840:	08003218 	.word	0x08003218
 8000844:	24000004 	.word	0x24000004
 8000848:	24000000 	.word	0x24000000

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_InitTick+0x60>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d101      	bne.n	8000860 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	e021      	b.n	80008a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <HAL_InitTick+0x64>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_InitTick+0x60>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f921 	bl	8000abe <HAL_SYSTICK_Config>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e00e      	b.n	80008a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d80a      	bhi.n	80008a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f000 f8f9 	bl	8000a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_InitTick+0x68>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2400000c 	.word	0x2400000c
 80008b0:	24000000 	.word	0x24000000
 80008b4:	24000008 	.word	0x24000008

080008b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_IncTick+0x20>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x24>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_IncTick+0x24>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	2400000c 	.word	0x2400000c
 80008dc:	24000078 	.word	0x24000078

080008e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <HAL_GetTick+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	24000078 	.word	0x24000078

080008f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <HAL_GetREVID+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	0c1b      	lsrs	r3, r3, #16
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	5c001000 	.word	0x5c001000

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <__NVIC_SetPriorityGrouping+0x40>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 800093a:	4313      	orrs	r3, r2
 800093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <__NVIC_SetPriorityGrouping+0x40>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000ed00 	.word	0xe000ed00
 8000954:	05fa0000 	.word	0x05fa0000

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	; (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f7ff ff8e 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff47 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff5e 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff90 	bl	80009c8 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5f 	bl	8000974 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ffb2 	bl	8000a30 <SysTick_Config>
 8000acc:	4603      	mov	r3, r0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ae6:	4b89      	ldr	r3, [pc, #548]	; (8000d0c <HAL_GPIO_Init+0x234>)
 8000ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000aea:	e194      	b.n	8000e16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 8186 	beq.w	8000e10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d005      	beq.n	8000b1c <HAL_GPIO_Init+0x44>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d130      	bne.n	8000b7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b52:	2201      	movs	r2, #1
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	f003 0201 	and.w	r2, r3, #1
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d017      	beq.n	8000bba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2203      	movs	r2, #3
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d123      	bne.n	8000c0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4013      	ands	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	08da      	lsrs	r2, r3, #3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3208      	adds	r2, #8
 8000c08:	69b9      	ldr	r1, [r7, #24]
 8000c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0203 	and.w	r2, r3, #3
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 80e0 	beq.w	8000e10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c50:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <HAL_GPIO_Init+0x238>)
 8000c52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c56:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <HAL_GPIO_Init+0x238>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_GPIO_Init+0x238>)
 8000c62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c6e:	4a29      	ldr	r2, [pc, #164]	; (8000d14 <HAL_GPIO_Init+0x23c>)
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <HAL_GPIO_Init+0x240>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d052      	beq.n	8000d40 <HAL_GPIO_Init+0x268>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <HAL_GPIO_Init+0x244>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d031      	beq.n	8000d06 <HAL_GPIO_Init+0x22e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_GPIO_Init+0x248>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d02b      	beq.n	8000d02 <HAL_GPIO_Init+0x22a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <HAL_GPIO_Init+0x24c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d025      	beq.n	8000cfe <HAL_GPIO_Init+0x226>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <HAL_GPIO_Init+0x250>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d01f      	beq.n	8000cfa <HAL_GPIO_Init+0x222>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <HAL_GPIO_Init+0x254>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d019      	beq.n	8000cf6 <HAL_GPIO_Init+0x21e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <HAL_GPIO_Init+0x258>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0x21a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_GPIO_Init+0x25c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00d      	beq.n	8000cee <HAL_GPIO_Init+0x216>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <HAL_GPIO_Init+0x260>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d007      	beq.n	8000cea <HAL_GPIO_Init+0x212>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_GPIO_Init+0x264>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_GPIO_Init+0x20e>
 8000ce2:	2309      	movs	r3, #9
 8000ce4:	e02d      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	e02b      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000cea:	2308      	movs	r3, #8
 8000cec:	e029      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000cee:	2307      	movs	r3, #7
 8000cf0:	e027      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	e025      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	e023      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e021      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e01f      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e01d      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e01b      	b.n	8000d42 <HAL_GPIO_Init+0x26a>
 8000d0a:	bf00      	nop
 8000d0c:	58000080 	.word	0x58000080
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58000400 	.word	0x58000400
 8000d18:	58020000 	.word	0x58020000
 8000d1c:	58020400 	.word	0x58020400
 8000d20:	58020800 	.word	0x58020800
 8000d24:	58020c00 	.word	0x58020c00
 8000d28:	58021000 	.word	0x58021000
 8000d2c:	58021400 	.word	0x58021400
 8000d30:	58021800 	.word	0x58021800
 8000d34:	58021c00 	.word	0x58021c00
 8000d38:	58022000 	.word	0x58022000
 8000d3c:	58022400 	.word	0x58022400
 8000d40:	2300      	movs	r3, #0
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	f002 0203 	and.w	r2, r2, #3
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d52:	4938      	ldr	r1, [pc, #224]	; (8000e34 <HAL_GPIO_Init+0x35c>)
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	3301      	adds	r3, #1
 8000e14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f47f ae63 	bne.w	8000aec <HAL_GPIO_Init+0x14>
  }
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	3724      	adds	r7, #36	; 0x24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	58000400 	.word	0x58000400

08000e38 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000e40:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_HSEM_FastTake+0x2c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3320      	adds	r3, #32
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_HSEM_FastTake+0x30>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d101      	bne.n	8000e54 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e000      	b.n	8000e56 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	58026400 	.word	0x58026400
 8000e68:	80000300 	.word	0x80000300

08000e6c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000e76:	4906      	ldr	r1, [pc, #24]	; (8000e90 <HAL_HSEM_Release+0x24>)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	58026400 	.word	0x58026400

08000e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e07f      	b.n	8000fa6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d106      	bne.n	8000ec0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fbd2 	bl	8000664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2224      	movs	r2, #36	; 0x24
 8000ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0201 	bic.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ee4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ef4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d107      	bne.n	8000f0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	e006      	b.n	8000f1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d104      	bne.n	8000f2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6859      	ldr	r1, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_I2C_Init+0x11c>)
 8000f3a:	430b      	orrs	r3, r1
 8000f3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691a      	ldr	r2, [r3, #16]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69d9      	ldr	r1, [r3, #28]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1a      	ldr	r2, [r3, #32]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0201 	orr.w	r2, r2, #1
 8000f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2220      	movs	r2, #32
 8000f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	02008000 	.word	0x02008000

08000fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b20      	cmp	r3, #32
 8000fc8:	d138      	bne.n	800103c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e032      	b.n	800103e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2224      	movs	r2, #36	; 0x24
 8000fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	e000      	b.n	800103e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800103c:	2302      	movs	r3, #2
  }
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b20      	cmp	r3, #32
 800105e:	d139      	bne.n	80010d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800106a:	2302      	movs	r3, #2
 800106c:	e033      	b.n	80010d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2224      	movs	r2, #36	; 0x24
 800107a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0201 	bic.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800109c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2220      	movs	r2, #32
 80010c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e000      	b.n	80010d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80010d4:	2302      	movs	r3, #2
  }
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80010ec:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_PWREx_ConfigSupply+0xb0>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	2b06      	cmp	r3, #6
 80010f6:	d00a      	beq.n	800110e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_PWREx_ConfigSupply+0xb0>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	d001      	beq.n	800110a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e040      	b.n	800118c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e03e      	b.n	800118c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <HAL_PWREx_ConfigSupply+0xb0>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001116:	491f      	ldr	r1, [pc, #124]	; (8001194 <HAL_PWREx_ConfigSupply+0xb0>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4313      	orrs	r3, r2
 800111c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800111e:	f7ff fbdf 	bl	80008e0 <HAL_GetTick>
 8001122:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001124:	e009      	b.n	800113a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001126:	f7ff fbdb 	bl	80008e0 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001134:	d901      	bls.n	800113a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e028      	b.n	800118c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_PWREx_ConfigSupply+0xb0>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001146:	d1ee      	bne.n	8001126 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b1e      	cmp	r3, #30
 800114c:	d008      	beq.n	8001160 <HAL_PWREx_ConfigSupply+0x7c>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b2e      	cmp	r3, #46	; 0x2e
 8001152:	d005      	beq.n	8001160 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b1d      	cmp	r3, #29
 8001158:	d002      	beq.n	8001160 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b2d      	cmp	r3, #45	; 0x2d
 800115e:	d114      	bne.n	800118a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001160:	f7ff fbbe 	bl	80008e0 <HAL_GetTick>
 8001164:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001166:	e009      	b.n	800117c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001168:	f7ff fbba 	bl	80008e0 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001176:	d901      	bls.n	800117c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e007      	b.n	800118c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_PWREx_ConfigSupply+0xb0>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d1ee      	bne.n	8001168 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024800 	.word	0x58024800

08001198 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f000 bc1d 	b.w	80019e6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 8087 	beq.w	80012c8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ba:	4b99      	ldr	r3, [pc, #612]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011c4:	4b96      	ldr	r3, [pc, #600]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	2b10      	cmp	r3, #16
 80011ce:	d007      	beq.n	80011e0 <HAL_RCC_OscConfig+0x48>
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	2b18      	cmp	r3, #24
 80011d4:	d110      	bne.n	80011f8 <HAL_RCC_OscConfig+0x60>
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d10b      	bne.n	80011f8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	4b8f      	ldr	r3, [pc, #572]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d06c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x12e>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d168      	bne.n	80012c6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e3f6      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d106      	bne.n	8001210 <HAL_RCC_OscConfig+0x78>
 8001202:	4b87      	ldr	r3, [pc, #540]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a86      	ldr	r2, [pc, #536]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e02e      	b.n	800126e <HAL_RCC_OscConfig+0xd6>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d10c      	bne.n	8001232 <HAL_RCC_OscConfig+0x9a>
 8001218:	4b81      	ldr	r3, [pc, #516]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a80      	ldr	r2, [pc, #512]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b7e      	ldr	r3, [pc, #504]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a7d      	ldr	r2, [pc, #500]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e01d      	b.n	800126e <HAL_RCC_OscConfig+0xd6>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800123a:	d10c      	bne.n	8001256 <HAL_RCC_OscConfig+0xbe>
 800123c:	4b78      	ldr	r3, [pc, #480]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a77      	ldr	r2, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b75      	ldr	r3, [pc, #468]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a74      	ldr	r2, [pc, #464]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800124e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e00b      	b.n	800126e <HAL_RCC_OscConfig+0xd6>
 8001256:	4b72      	ldr	r3, [pc, #456]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a71      	ldr	r2, [pc, #452]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800125c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b6f      	ldr	r3, [pc, #444]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6e      	ldr	r2, [pc, #440]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d013      	beq.n	800129e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fb33 	bl	80008e0 <HAL_GetTick>
 800127a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127e:	f7ff fb2f 	bl	80008e0 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b64      	cmp	r3, #100	; 0x64
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e3aa      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001290:	4b63      	ldr	r3, [pc, #396]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0xe6>
 800129c:	e014      	b.n	80012c8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fb1f 	bl	80008e0 <HAL_GetTick>
 80012a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a6:	f7ff fb1b 	bl	80008e0 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e396      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x10e>
 80012c4:	e000      	b.n	80012c8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80cb 	beq.w	800146c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d6:	4b52      	ldr	r3, [pc, #328]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012e0:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_RCC_OscConfig+0x164>
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	2b18      	cmp	r3, #24
 80012f0:	d156      	bne.n	80013a0 <HAL_RCC_OscConfig+0x208>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d151      	bne.n	80013a0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012fc:	4b48      	ldr	r3, [pc, #288]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_OscConfig+0x17c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e368      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001314:	4b42      	ldr	r3, [pc, #264]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 0219 	bic.w	r2, r3, #25
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	493f      	ldr	r1, [pc, #252]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001326:	f7ff fadb 	bl	80008e0 <HAL_GetTick>
 800132a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fad7 	bl	80008e0 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e352      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001340:	4b37      	ldr	r3, [pc, #220]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	f7ff fad4 	bl	80008f8 <HAL_GetREVID>
 8001350:	4603      	mov	r3, r0
 8001352:	f241 0203 	movw	r2, #4099	; 0x1003
 8001356:	4293      	cmp	r3, r2
 8001358:	d817      	bhi.n	800138a <HAL_RCC_OscConfig+0x1f2>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	2b40      	cmp	r3, #64	; 0x40
 8001360:	d108      	bne.n	8001374 <HAL_RCC_OscConfig+0x1dc>
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800136a:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001372:	e07b      	b.n	800146c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	031b      	lsls	r3, r3, #12
 8001382:	4927      	ldr	r1, [pc, #156]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001388:	e070      	b.n	800146c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	061b      	lsls	r3, r3, #24
 8001398:	4921      	ldr	r1, [pc, #132]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139e:	e065      	b.n	800146c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d048      	beq.n	800143a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 0219 	bic.w	r2, r3, #25
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	491a      	ldr	r1, [pc, #104]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fa91 	bl	80008e0 <HAL_GetTick>
 80013be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fa8d 	bl	80008e0 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e308      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	f7ff fa8a 	bl	80008f8 <HAL_GetREVID>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d81a      	bhi.n	8001424 <HAL_RCC_OscConfig+0x28c>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	2b40      	cmp	r3, #64	; 0x40
 80013f4:	d108      	bne.n	8001408 <HAL_RCC_OscConfig+0x270>
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	6053      	str	r3, [r2, #4]
 8001406:	e031      	b.n	800146c <HAL_RCC_OscConfig+0x2d4>
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	031b      	lsls	r3, r3, #12
 8001416:	4902      	ldr	r1, [pc, #8]	; (8001420 <HAL_RCC_OscConfig+0x288>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e026      	b.n	800146c <HAL_RCC_OscConfig+0x2d4>
 800141e:	bf00      	nop
 8001420:	58024400 	.word	0x58024400
 8001424:	4b9a      	ldr	r3, [pc, #616]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	4997      	ldr	r1, [pc, #604]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
 8001438:	e018      	b.n	800146c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b95      	ldr	r3, [pc, #596]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a94      	ldr	r2, [pc, #592]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fa4b 	bl	80008e0 <HAL_GetTick>
 800144a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fa47 	bl	80008e0 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e2c2      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001460:	4b8b      	ldr	r3, [pc, #556]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a9 	beq.w	80015cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147a:	4b85      	ldr	r3, [pc, #532]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001482:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001484:	4b82      	ldr	r3, [pc, #520]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b08      	cmp	r3, #8
 800148e:	d007      	beq.n	80014a0 <HAL_RCC_OscConfig+0x308>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b18      	cmp	r3, #24
 8001494:	d13a      	bne.n	800150c <HAL_RCC_OscConfig+0x374>
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d135      	bne.n	800150c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a0:	4b7b      	ldr	r3, [pc, #492]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x320>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	2b80      	cmp	r3, #128	; 0x80
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e296      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014b8:	f7ff fa1e 	bl	80008f8 <HAL_GetREVID>
 80014bc:	4603      	mov	r3, r0
 80014be:	f241 0203 	movw	r2, #4099	; 0x1003
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d817      	bhi.n	80014f6 <HAL_RCC_OscConfig+0x35e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	2b20      	cmp	r3, #32
 80014cc:	d108      	bne.n	80014e0 <HAL_RCC_OscConfig+0x348>
 80014ce:	4b70      	ldr	r3, [pc, #448]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014d6:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80014d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014dc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014de:	e075      	b.n	80015cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014e0:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	069b      	lsls	r3, r3, #26
 80014ee:	4968      	ldr	r1, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014f4:	e06a      	b.n	80015cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014f6:	4b66      	ldr	r3, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	061b      	lsls	r3, r3, #24
 8001504:	4962      	ldr	r1, [pc, #392]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800150a:	e05f      	b.n	80015cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d042      	beq.n	800159a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001514:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5d      	ldr	r2, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800151a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff f9de 	bl	80008e0 <HAL_GetTick>
 8001524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001528:	f7ff f9da 	bl	80008e0 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e255      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800153a:	4b55      	ldr	r3, [pc, #340]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001546:	f7ff f9d7 	bl	80008f8 <HAL_GetREVID>
 800154a:	4603      	mov	r3, r0
 800154c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001550:	4293      	cmp	r3, r2
 8001552:	d817      	bhi.n	8001584 <HAL_RCC_OscConfig+0x3ec>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	2b20      	cmp	r3, #32
 800155a:	d108      	bne.n	800156e <HAL_RCC_OscConfig+0x3d6>
 800155c:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001564:	4a4a      	ldr	r2, [pc, #296]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800156a:	6053      	str	r3, [r2, #4]
 800156c:	e02e      	b.n	80015cc <HAL_RCC_OscConfig+0x434>
 800156e:	4b48      	ldr	r3, [pc, #288]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	069b      	lsls	r3, r3, #26
 800157c:	4944      	ldr	r1, [pc, #272]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
 8001582:	e023      	b.n	80015cc <HAL_RCC_OscConfig+0x434>
 8001584:	4b42      	ldr	r3, [pc, #264]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	061b      	lsls	r3, r3, #24
 8001592:	493f      	ldr	r1, [pc, #252]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001594:	4313      	orrs	r3, r2
 8001596:	60cb      	str	r3, [r1, #12]
 8001598:	e018      	b.n	80015cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a3c      	ldr	r2, [pc, #240]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80015a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff f99b 	bl	80008e0 <HAL_GetTick>
 80015aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80015ae:	f7ff f997 	bl	80008e0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e212      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d036      	beq.n	8001646 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d019      	beq.n	8001614 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80015e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e4:	4a2a      	ldr	r2, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff f978 	bl	80008e0 <HAL_GetTick>
 80015f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff f974 	bl	80008e0 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1ef      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x45c>
 8001612:	e018      	b.n	8001646 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001618:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff f95e 	bl	80008e0 <HAL_GetTick>
 8001624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff f95a 	bl	80008e0 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e1d5      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	2b00      	cmp	r3, #0
 8001650:	d039      	beq.n	80016c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d01c      	beq.n	8001694 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001664:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001666:	f7ff f93b 	bl	80008e0 <HAL_GetTick>
 800166a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800166e:	f7ff f937 	bl	80008e0 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1b2      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_RCC_OscConfig+0x4f8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x4d6>
 800168c:	e01b      	b.n	80016c6 <HAL_RCC_OscConfig+0x52e>
 800168e:	bf00      	nop
 8001690:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001694:	4b9b      	ldr	r3, [pc, #620]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a9a      	ldr	r2, [pc, #616]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 800169a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800169e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016a0:	f7ff f91e 	bl	80008e0 <HAL_GetTick>
 80016a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80016a8:	f7ff f91a 	bl	80008e0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e195      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016ba:	4b92      	ldr	r3, [pc, #584]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8081 	beq.w	80017d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016d4:	4b8c      	ldr	r3, [pc, #560]	; (8001908 <HAL_RCC_OscConfig+0x770>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a8b      	ldr	r2, [pc, #556]	; (8001908 <HAL_RCC_OscConfig+0x770>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016e0:	f7ff f8fe 	bl	80008e0 <HAL_GetTick>
 80016e4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016e8:	f7ff f8fa 	bl	80008e0 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e175      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016fa:	4b83      	ldr	r3, [pc, #524]	; (8001908 <HAL_RCC_OscConfig+0x770>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d106      	bne.n	800171c <HAL_RCC_OscConfig+0x584>
 800170e:	4b7d      	ldr	r3, [pc, #500]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a7c      	ldr	r2, [pc, #496]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	e02d      	b.n	8001778 <HAL_RCC_OscConfig+0x5e0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x5a6>
 8001724:	4b77      	ldr	r3, [pc, #476]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a76      	ldr	r2, [pc, #472]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	4b74      	ldr	r3, [pc, #464]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a73      	ldr	r2, [pc, #460]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	e01c      	b.n	8001778 <HAL_RCC_OscConfig+0x5e0>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x5c8>
 8001746:	4b6f      	ldr	r3, [pc, #444]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a6e      	ldr	r2, [pc, #440]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
 8001752:	4b6c      	ldr	r3, [pc, #432]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	4a6b      	ldr	r2, [pc, #428]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6713      	str	r3, [r2, #112]	; 0x70
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0x5e0>
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	4a67      	ldr	r2, [pc, #412]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6713      	str	r3, [r2, #112]	; 0x70
 800176c:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	4a64      	ldr	r2, [pc, #400]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001772:	f023 0304 	bic.w	r3, r3, #4
 8001776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d015      	beq.n	80017ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff f8ae 	bl	80008e0 <HAL_GetTick>
 8001784:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff f8aa 	bl	80008e0 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e123      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800179e:	4b59      	ldr	r3, [pc, #356]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0ee      	beq.n	8001788 <HAL_RCC_OscConfig+0x5f0>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff f898 	bl	80008e0 <HAL_GetTick>
 80017b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff f894 	bl	80008e0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e10d      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ca:	4b4e      	ldr	r3, [pc, #312]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ee      	bne.n	80017b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8102 	beq.w	80019e4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017e0:	4b48      	ldr	r3, [pc, #288]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017e8:	2b18      	cmp	r3, #24
 80017ea:	f000 80bd 	beq.w	8001968 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	f040 809e 	bne.w	8001934 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b42      	ldr	r3, [pc, #264]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a41      	ldr	r2, [pc, #260]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80017fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff f86c 	bl	80008e0 <HAL_GetTick>
 8001808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f868 	bl	80008e0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0e3      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 800182c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_OscConfig+0x774>)
 8001830:	4013      	ands	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	430a      	orrs	r2, r1
 800183e:	4931      	ldr	r1, [pc, #196]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001840:	4313      	orrs	r3, r2
 8001842:	628b      	str	r3, [r1, #40]	; 0x28
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	3b01      	subs	r3, #1
 800184a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001852:	3b01      	subs	r3, #1
 8001854:	025b      	lsls	r3, r3, #9
 8001856:	b29b      	uxth	r3, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800185e:	3b01      	subs	r3, #1
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186c:	3b01      	subs	r3, #1
 800186e:	061b      	lsls	r3, r3, #24
 8001870:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001874:	4923      	ldr	r1, [pc, #140]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001876:	4313      	orrs	r3, r2
 8001878:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	4a21      	ldr	r2, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_RCC_OscConfig+0x778>)
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001892:	00d2      	lsls	r2, r2, #3
 8001894:	491b      	ldr	r1, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 8001896:	4313      	orrs	r3, r2
 8001898:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	f023 020c 	bic.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4917      	ldr	r1, [pc, #92]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f023 0202 	bic.w	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	4912      	ldr	r1, [pc, #72]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7fe fff1 	bl	80008e0 <HAL_GetTick>
 80018fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001900:	e011      	b.n	8001926 <HAL_RCC_OscConfig+0x78e>
 8001902:	bf00      	nop
 8001904:	58024400 	.word	0x58024400
 8001908:	58024800 	.word	0x58024800
 800190c:	fffffc0c 	.word	0xfffffc0c
 8001910:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001914:	f7fe ffe4 	bl	80008e0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e05f      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001926:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_RCC_OscConfig+0x858>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x77c>
 8001932:	e057      	b.n	80019e4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_RCC_OscConfig+0x858>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2d      	ldr	r2, [pc, #180]	; (80019f0 <HAL_RCC_OscConfig+0x858>)
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7fe ffce 	bl	80008e0 <HAL_GetTick>
 8001944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7fe ffca 	bl	80008e0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e045      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_RCC_OscConfig+0x858>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x7b0>
 8001966:	e03d      	b.n	80019e4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_RCC_OscConfig+0x858>)
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_OscConfig+0x858>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	2b01      	cmp	r3, #1
 800197a:	d031      	beq.n	80019e0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f003 0203 	and.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d12a      	bne.n	80019e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d122      	bne.n	80019e0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d11a      	bne.n	80019e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	0a5b      	lsrs	r3, r3, #9
 80019ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d111      	bne.n	80019e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	0c1b      	lsrs	r3, r3, #16
 80019c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d108      	bne.n	80019e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0e1b      	lsrs	r3, r3, #24
 80019d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3730      	adds	r7, #48	; 0x30
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	58024400 	.word	0x58024400

080019f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e19c      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b8a      	ldr	r3, [pc, #552]	; (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d910      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b87      	ldr	r3, [pc, #540]	; (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 020f 	bic.w	r2, r3, #15
 8001a1e:	4985      	ldr	r1, [pc, #532]	; (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b83      	ldr	r3, [pc, #524]	; (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e184      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d010      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d908      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a54:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	4975      	ldr	r1, [pc, #468]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d010      	beq.n	8001a94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	4b70      	ldr	r3, [pc, #448]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d908      	bls.n	8001a94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a82:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	496a      	ldr	r1, [pc, #424]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d010      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	4b64      	ldr	r3, [pc, #400]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d908      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ab0:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	495e      	ldr	r1, [pc, #376]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d010      	beq.n	8001af0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69da      	ldr	r2, [r3, #28]
 8001ad2:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d908      	bls.n	8001af0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ade:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4953      	ldr	r1, [pc, #332]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d010      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d908      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f023 020f 	bic.w	r2, r3, #15
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4947      	ldr	r1, [pc, #284]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d055      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4940      	ldr	r1, [pc, #256]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b44:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d121      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0f6      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d115      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0ea      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0de      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b84:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0d6      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b94:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f023 0207 	bic.w	r2, r3, #7
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4925      	ldr	r1, [pc, #148]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7fe fe9b 	bl	80008e0 <HAL_GetTick>
 8001baa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bae:	f7fe fe97 	bl	80008e0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0be      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d1eb      	bne.n	8001bae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d010      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d208      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f023 020f 	bic.w	r2, r3, #15
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	490e      	ldr	r1, [pc, #56]	; (8001c38 <HAL_RCC_ClockConfig+0x244>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d214      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 020f 	bic.w	r2, r3, #15
 8001c1a:	4906      	ldr	r1, [pc, #24]	; (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <HAL_RCC_ClockConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e086      	b.n	8001d42 <HAL_RCC_ClockConfig+0x34e>
 8001c34:	52002000 	.word	0x52002000
 8001c38:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d010      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d208      	bcs.n	8001c6a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	4939      	ldr	r1, [pc, #228]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d010      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d208      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c86:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	492e      	ldr	r1, [pc, #184]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d208      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4922      	ldr	r1, [pc, #136]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d010      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d208      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4917      	ldr	r1, [pc, #92]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cf4:	f000 f834 	bl	8001d60 <HAL_RCC_GetSysClockFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	4912      	ldr	r1, [pc, #72]	; (8001d50 <HAL_RCC_ClockConfig+0x35c>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_RCC_ClockConfig+0x358>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <HAL_RCC_ClockConfig+0x35c>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x360>)
 8001d2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_RCC_ClockConfig+0x364>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_RCC_ClockConfig+0x368>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fd88 	bl	800084c <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	08003218 	.word	0x08003218
 8001d54:	24000004 	.word	0x24000004
 8001d58:	24000000 	.word	0x24000000
 8001d5c:	24000008 	.word	0x24000008

08001d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d66:	4bb3      	ldr	r3, [pc, #716]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d6e:	2b18      	cmp	r3, #24
 8001d70:	f200 8155 	bhi.w	800201e <HAL_RCC_GetSysClockFreq+0x2be>
 8001d74:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	08001de1 	.word	0x08001de1
 8001d80:	0800201f 	.word	0x0800201f
 8001d84:	0800201f 	.word	0x0800201f
 8001d88:	0800201f 	.word	0x0800201f
 8001d8c:	0800201f 	.word	0x0800201f
 8001d90:	0800201f 	.word	0x0800201f
 8001d94:	0800201f 	.word	0x0800201f
 8001d98:	0800201f 	.word	0x0800201f
 8001d9c:	08001e07 	.word	0x08001e07
 8001da0:	0800201f 	.word	0x0800201f
 8001da4:	0800201f 	.word	0x0800201f
 8001da8:	0800201f 	.word	0x0800201f
 8001dac:	0800201f 	.word	0x0800201f
 8001db0:	0800201f 	.word	0x0800201f
 8001db4:	0800201f 	.word	0x0800201f
 8001db8:	0800201f 	.word	0x0800201f
 8001dbc:	08001e0d 	.word	0x08001e0d
 8001dc0:	0800201f 	.word	0x0800201f
 8001dc4:	0800201f 	.word	0x0800201f
 8001dc8:	0800201f 	.word	0x0800201f
 8001dcc:	0800201f 	.word	0x0800201f
 8001dd0:	0800201f 	.word	0x0800201f
 8001dd4:	0800201f 	.word	0x0800201f
 8001dd8:	0800201f 	.word	0x0800201f
 8001ddc:	08001e13 	.word	0x08001e13
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001de0:	4b94      	ldr	r3, [pc, #592]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dec:	4b91      	ldr	r3, [pc, #580]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	4a90      	ldr	r2, [pc, #576]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001dfe:	e111      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e00:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e02:	61bb      	str	r3, [r7, #24]
    break;
 8001e04:	e10e      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001e06:	4b8d      	ldr	r3, [pc, #564]	; (800203c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e08:	61bb      	str	r3, [r7, #24]
    break;
 8001e0a:	e10b      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001e0c:	4b8c      	ldr	r3, [pc, #560]	; (8002040 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e0e:	61bb      	str	r3, [r7, #24]
    break;
 8001e10:	e108      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e12:	4b88      	ldr	r3, [pc, #544]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e1c:	4b85      	ldr	r3, [pc, #532]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e26:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e28:	4b82      	ldr	r3, [pc, #520]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e32:	4b80      	ldr	r3, [pc, #512]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	08db      	lsrs	r3, r3, #3
 8001e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80e1 	beq.w	8002018 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	f000 8083 	beq.w	8001f64 <HAL_RCC_GetSysClockFreq+0x204>
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	f200 80a1 	bhi.w	8001fa8 <HAL_RCC_GetSysClockFreq+0x248>
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x114>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d056      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e72:	e099      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e74:	4b6f      	ldr	r3, [pc, #444]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02d      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e80:	4b6c      	ldr	r3, [pc, #432]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	4a6b      	ldr	r2, [pc, #428]	; (8002038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eaa:	4b62      	ldr	r3, [pc, #392]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ebe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001eda:	e087      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002048 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eee:	4b51      	ldr	r3, [pc, #324]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f02:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f1e:	e065      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800204c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f62:	e043      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002050 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fa6:	e021      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800204c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fba:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	0a5b      	lsrs	r3, r3, #9
 8001ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002004:	edd7 6a07 	vldr	s13, [r7, #28]
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002010:	ee17 3a90 	vmov	r3, s15
 8002014:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002016:	e005      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    break;
 800201c:	e002      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002020:	61bb      	str	r3, [r7, #24]
    break;
 8002022:	bf00      	nop
  }

  return sysclockfreq;
 8002024:	69bb      	ldr	r3, [r7, #24]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	58024400 	.word	0x58024400
 8002038:	03d09000 	.word	0x03d09000
 800203c:	003d0900 	.word	0x003d0900
 8002040:	017d7840 	.word	0x017d7840
 8002044:	46000000 	.word	0x46000000
 8002048:	4c742400 	.word	0x4c742400
 800204c:	4a742400 	.word	0x4a742400
 8002050:	4bbebc20 	.word	0x4bbebc20

08002054 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800205c:	2300      	movs	r3, #0
 800205e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002060:	2300      	movs	r3, #0
 8002062:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d03f      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002074:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002078:	d02a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800207a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800207e:	d824      	bhi.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002084:	d018      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800208a:	d81e      	bhi.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002094:	d007      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002096:	e018      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002098:	4ba3      	ldr	r3, [pc, #652]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	4aa2      	ldr	r2, [pc, #648]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800209e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80020a4:	e015      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2102      	movs	r1, #2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 ff17 	bl	8002ee0 <RCCEx_PLL2_Config>
 80020b2:	4603      	mov	r3, r0
 80020b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80020b6:	e00c      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3324      	adds	r3, #36	; 0x24
 80020bc:	2102      	movs	r1, #2
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 ffc0 	bl	8003044 <RCCEx_PLL3_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80020c8:	e003      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
      break;
 80020ce:	e000      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80020d8:	4b93      	ldr	r3, [pc, #588]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e4:	4990      	ldr	r1, [pc, #576]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	650b      	str	r3, [r1, #80]	; 0x50
 80020ea:	e001      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03d      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	2b04      	cmp	r3, #4
 8002102:	d826      	bhi.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002104:	a201      	add	r2, pc, #4	; (adr r2, 800210c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210a:	bf00      	nop
 800210c:	08002121 	.word	0x08002121
 8002110:	0800212f 	.word	0x0800212f
 8002114:	08002141 	.word	0x08002141
 8002118:	08002159 	.word	0x08002159
 800211c:	08002159 	.word	0x08002159
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002120:	4b81      	ldr	r3, [pc, #516]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	4a80      	ldr	r2, [pc, #512]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800212c:	e015      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3304      	adds	r3, #4
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fed3 	bl	8002ee0 <RCCEx_PLL2_Config>
 800213a:	4603      	mov	r3, r0
 800213c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800213e:	e00c      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3324      	adds	r3, #36	; 0x24
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f000 ff7c 	bl	8003044 <RCCEx_PLL3_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002150:	e003      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
      break;
 8002156:	e000      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800215a:	7dfb      	ldrb	r3, [r7, #23]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002160:	4b71      	ldr	r3, [pc, #452]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002164:	f023 0207 	bic.w	r2, r3, #7
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	496e      	ldr	r1, [pc, #440]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	650b      	str	r3, [r1, #80]	; 0x50
 8002172:	e001      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002180:	2b00      	cmp	r3, #0
 8002182:	d042      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800218c:	d02b      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800218e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002192:	d825      	bhi.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002194:	2bc0      	cmp	r3, #192	; 0xc0
 8002196:	d028      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002198:	2bc0      	cmp	r3, #192	; 0xc0
 800219a:	d821      	bhi.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800219c:	2b80      	cmp	r3, #128	; 0x80
 800219e:	d016      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	d81d      	bhi.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d007      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80021ac:	e018      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021ae:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	4a5d      	ldr	r2, [pc, #372]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021ba:	e017      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fe8c 	bl	8002ee0 <RCCEx_PLL2_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021cc:	e00e      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3324      	adds	r3, #36	; 0x24
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 ff35 	bl	8003044 <RCCEx_PLL3_Config>
 80021da:	4603      	mov	r3, r0
 80021dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021de:	e005      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	75fb      	strb	r3, [r7, #23]
      break;
 80021e4:	e002      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80021e6:	bf00      	nop
 80021e8:	e000      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80021ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80021f2:	4b4d      	ldr	r3, [pc, #308]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	494a      	ldr	r1, [pc, #296]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	650b      	str	r3, [r1, #80]	; 0x50
 8002204:	e001      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002212:	2b00      	cmp	r3, #0
 8002214:	d049      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800221c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002220:	d030      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002222:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002226:	d82a      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002228:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800222c:	d02c      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800222e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002232:	d824      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002238:	d018      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800223a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800223e:	d81e      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002244:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002248:	d007      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800224a:	e018      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800224c:	4b36      	ldr	r3, [pc, #216]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	4a35      	ldr	r2, [pc, #212]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002258:	e017      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fe3d 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002266:	4603      	mov	r3, r0
 8002268:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800226a:	e00e      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3324      	adds	r3, #36	; 0x24
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fee6 	bl	8003044 <RCCEx_PLL3_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800227c:	e005      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
      break;
 8002282:	e002      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002284:	bf00      	nop
 8002286:	e000      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800229e:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	658b      	str	r3, [r1, #88]	; 0x58
 80022a4:	e001      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d04b      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80022bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c0:	d030      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80022c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c6:	d82a      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80022c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022cc:	d02e      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80022ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022d2:	d824      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80022d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022d8:	d018      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80022da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022de:	d81e      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d007      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80022ea:	e018      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022f8:	e019      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fded 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800230a:	e010      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3324      	adds	r3, #36	; 0x24
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fe96 	bl	8003044 <RCCEx_PLL3_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800231c:	e007      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	75fb      	strb	r3, [r7, #23]
      break;
 8002322:	e004      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002324:	bf00      	nop
 8002326:	e002      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002328:	58024400 	.word	0x58024400
      break;
 800232c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800232e:	7dfb      	ldrb	r3, [r7, #23]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002334:	4b99      	ldr	r3, [pc, #612]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002338:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002342:	4996      	ldr	r1, [pc, #600]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002344:	4313      	orrs	r3, r2
 8002346:	658b      	str	r3, [r1, #88]	; 0x58
 8002348:	e001      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800234a:	7dfb      	ldrb	r3, [r7, #23]
 800234c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d032      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	2b30      	cmp	r3, #48	; 0x30
 8002360:	d01c      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002362:	2b30      	cmp	r3, #48	; 0x30
 8002364:	d817      	bhi.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002366:	2b20      	cmp	r3, #32
 8002368:	d00c      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800236a:	2b20      	cmp	r3, #32
 800236c:	d813      	bhi.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002372:	2b10      	cmp	r3, #16
 8002374:	d10f      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002376:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	4a88      	ldr	r2, [pc, #544]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002382:	e00e      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	2102      	movs	r1, #2
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fda8 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002394:	e005      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800239c:	bf00      	nop
 800239e:	e000      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80023a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d109      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023a8:	4b7c      	ldr	r3, [pc, #496]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	4979      	ldr	r1, [pc, #484]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80023ba:	e001      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d047      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023d4:	d030      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023da:	d82a      	bhi.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80023dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023e0:	d02c      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80023e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023e6:	d824      	bhi.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80023e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ec:	d018      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80023ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f2:	d81e      	bhi.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80023f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fc:	d007      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80023fe:	e018      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002400:	4b66      	ldr	r3, [pc, #408]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	4a65      	ldr	r2, [pc, #404]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800240c:	e017      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3304      	adds	r3, #4
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fd63 	bl	8002ee0 <RCCEx_PLL2_Config>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800241e:	e00e      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3324      	adds	r3, #36	; 0x24
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fe0c 	bl	8003044 <RCCEx_PLL3_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002430:	e005      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
      break;
 8002436:	e002      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800243c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002444:	4b55      	ldr	r3, [pc, #340]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002448:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	4952      	ldr	r1, [pc, #328]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002452:	4313      	orrs	r3, r2
 8002454:	650b      	str	r3, [r1, #80]	; 0x50
 8002456:	e001      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d049      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002470:	d02e      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002476:	d828      	bhi.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002478:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800247c:	d02a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800247e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002482:	d822      	bhi.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002484:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002488:	d026      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800248a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800248e:	d81c      	bhi.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002494:	d010      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800249a:	d816      	bhi.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01d      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a4:	d111      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fd17 	bl	8002ee0 <RCCEx_PLL2_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80024b6:	e012      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3324      	adds	r3, #36	; 0x24
 80024bc:	2101      	movs	r1, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fdc0 	bl	8003044 <RCCEx_PLL3_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80024c8:	e009      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
      break;
 80024ce:	e006      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80024d0:	bf00      	nop
 80024d2:	e004      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80024d4:	bf00      	nop
 80024d6:	e002      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80024d8:	bf00      	nop
 80024da:	e000      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80024dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024de:	7dfb      	ldrb	r3, [r7, #23]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80024e4:	4b2d      	ldr	r3, [pc, #180]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f0:	492a      	ldr	r1, [pc, #168]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	650b      	str	r3, [r1, #80]	; 0x50
 80024f6:	e001      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d04d      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800250e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002512:	d02e      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002518:	d828      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800251a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251e:	d02a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d822      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002526:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800252a:	d026      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800252c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002530:	d81c      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002536:	d010      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800253c:	d816      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800253e:	2b00      	cmp	r3, #0
 8002540:	d01d      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002546:	d111      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fcc6 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002558:	e012      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3324      	adds	r3, #36	; 0x24
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fd6f 	bl	8003044 <RCCEx_PLL3_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800256a:	e009      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	75fb      	strb	r3, [r7, #23]
      break;
 8002570:	e006      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002572:	bf00      	nop
 8002574:	e004      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002576:	bf00      	nop
 8002578:	e002      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800257e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002594:	4901      	ldr	r1, [pc, #4]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002596:	4313      	orrs	r3, r2
 8002598:	658b      	str	r3, [r1, #88]	; 0x58
 800259a:	e003      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800259c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02f      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b8:	d00e      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80025ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025be:	d814      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x596>
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80025c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025c8:	d10f      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025ca:	4baf      	ldr	r3, [pc, #700]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	4aae      	ldr	r2, [pc, #696]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80025d6:	e00c      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3304      	adds	r3, #4
 80025dc:	2101      	movs	r1, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fc7e 	bl	8002ee0 <RCCEx_PLL2_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80025e8:	e003      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
      break;
 80025ee:	e000      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80025f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025f8:	4ba3      	ldr	r3, [pc, #652]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002604:	49a0      	ldr	r1, [pc, #640]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002606:	4313      	orrs	r3, r2
 8002608:	650b      	str	r3, [r1, #80]	; 0x50
 800260a:	e001      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d032      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	2b03      	cmp	r3, #3
 8002622:	d81b      	bhi.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	08002663 	.word	0x08002663
 8002630:	0800263d 	.word	0x0800263d
 8002634:	0800264b 	.word	0x0800264b
 8002638:	08002663 	.word	0x08002663
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800263c:	4b92      	ldr	r3, [pc, #584]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	4a91      	ldr	r2, [pc, #580]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002648:	e00c      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3304      	adds	r3, #4
 800264e:	2102      	movs	r1, #2
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fc45 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002656:	4603      	mov	r3, r0
 8002658:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800265a:	e003      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	75fb      	strb	r3, [r7, #23]
      break;
 8002660:	e000      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800266a:	4b87      	ldr	r3, [pc, #540]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4984      	ldr	r1, [pc, #528]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002678:	4313      	orrs	r3, r2
 800267a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800267c:	e001      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8086 	beq.w	800279c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002690:	4b7e      	ldr	r3, [pc, #504]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a7d      	ldr	r2, [pc, #500]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800269c:	f7fe f920 	bl	80008e0 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026a2:	e009      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe f91c 	bl	80008e0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d902      	bls.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	75fb      	strb	r3, [r7, #23]
        break;
 80026b6:	e005      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026b8:	4b74      	ldr	r3, [pc, #464]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ef      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d166      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80026ca:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026d4:	4053      	eors	r3, r2
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d013      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026de:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026e8:	4b67      	ldr	r3, [pc, #412]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a66      	ldr	r2, [pc, #408]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026f4:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a63      	ldr	r2, [pc, #396]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002700:	4a61      	ldr	r2, [pc, #388]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800270c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002710:	d115      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe f8e5 	bl	80008e0 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002718:	e00b      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fe f8e1 	bl	80008e0 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d902      	bls.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	75fb      	strb	r3, [r7, #23]
            break;
 8002730:	e005      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002732:	4b55      	ldr	r3, [pc, #340]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0ed      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d126      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002752:	d10d      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002754:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002762:	0919      	lsrs	r1, r3, #4
 8002764:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002766:	400b      	ands	r3, r1
 8002768:	4947      	ldr	r1, [pc, #284]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800276a:	4313      	orrs	r3, r2
 800276c:	610b      	str	r3, [r1, #16]
 800276e:	e005      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002770:	4b45      	ldr	r3, [pc, #276]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4a44      	ldr	r2, [pc, #272]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002776:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800277a:	6113      	str	r3, [r2, #16]
 800277c:	4b42      	ldr	r3, [pc, #264]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800277e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278a:	493f      	ldr	r1, [pc, #252]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800278c:	4313      	orrs	r3, r2
 800278e:	670b      	str	r3, [r1, #112]	; 0x70
 8002790:	e004      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	75bb      	strb	r3, [r7, #22]
 8002796:	e001      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8085 	beq.w	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ae:	2b28      	cmp	r3, #40	; 0x28
 80027b0:	d866      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	08002895 	.word	0x08002895
 80027bc:	08002881 	.word	0x08002881
 80027c0:	08002881 	.word	0x08002881
 80027c4:	08002881 	.word	0x08002881
 80027c8:	08002881 	.word	0x08002881
 80027cc:	08002881 	.word	0x08002881
 80027d0:	08002881 	.word	0x08002881
 80027d4:	08002881 	.word	0x08002881
 80027d8:	0800285d 	.word	0x0800285d
 80027dc:	08002881 	.word	0x08002881
 80027e0:	08002881 	.word	0x08002881
 80027e4:	08002881 	.word	0x08002881
 80027e8:	08002881 	.word	0x08002881
 80027ec:	08002881 	.word	0x08002881
 80027f0:	08002881 	.word	0x08002881
 80027f4:	08002881 	.word	0x08002881
 80027f8:	0800286f 	.word	0x0800286f
 80027fc:	08002881 	.word	0x08002881
 8002800:	08002881 	.word	0x08002881
 8002804:	08002881 	.word	0x08002881
 8002808:	08002881 	.word	0x08002881
 800280c:	08002881 	.word	0x08002881
 8002810:	08002881 	.word	0x08002881
 8002814:	08002881 	.word	0x08002881
 8002818:	08002895 	.word	0x08002895
 800281c:	08002881 	.word	0x08002881
 8002820:	08002881 	.word	0x08002881
 8002824:	08002881 	.word	0x08002881
 8002828:	08002881 	.word	0x08002881
 800282c:	08002881 	.word	0x08002881
 8002830:	08002881 	.word	0x08002881
 8002834:	08002881 	.word	0x08002881
 8002838:	08002895 	.word	0x08002895
 800283c:	08002881 	.word	0x08002881
 8002840:	08002881 	.word	0x08002881
 8002844:	08002881 	.word	0x08002881
 8002848:	08002881 	.word	0x08002881
 800284c:	08002881 	.word	0x08002881
 8002850:	08002881 	.word	0x08002881
 8002854:	08002881 	.word	0x08002881
 8002858:	08002895 	.word	0x08002895
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	2101      	movs	r1, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fb3c 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800286c:	e013      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3324      	adds	r3, #36	; 0x24
 8002872:	2101      	movs	r1, #1
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fbe5 	bl	8003044 <RCCEx_PLL3_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800287e:	e00a      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	75fb      	strb	r3, [r7, #23]
      break;
 8002884:	e007      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002886:	bf00      	nop
 8002888:	58024400 	.word	0x58024400
 800288c:	58024800 	.word	0x58024800
 8002890:	00ffffcf 	.word	0x00ffffcf
      break;
 8002894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800289c:	4b96      	ldr	r3, [pc, #600]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028a8:	4993      	ldr	r1, [pc, #588]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	654b      	str	r3, [r1, #84]	; 0x54
 80028ae:	e001      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d038      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d821      	bhi.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80028c8:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	08002913 	.word	0x08002913
 80028d4:	080028e9 	.word	0x080028e9
 80028d8:	080028fb 	.word	0x080028fb
 80028dc:	08002913 	.word	0x08002913
 80028e0:	08002913 	.word	0x08002913
 80028e4:	08002913 	.word	0x08002913
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 faf6 	bl	8002ee0 <RCCEx_PLL2_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80028f8:	e00c      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3324      	adds	r3, #36	; 0x24
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fb9f 	bl	8003044 <RCCEx_PLL3_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800290a:	e003      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	75fb      	strb	r3, [r7, #23]
      break;
 8002910:	e000      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002912:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800291a:	4b77      	ldr	r3, [pc, #476]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	f023 0207 	bic.w	r2, r3, #7
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002926:	4974      	ldr	r1, [pc, #464]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002928:	4313      	orrs	r3, r2
 800292a:	654b      	str	r3, [r1, #84]	; 0x54
 800292c:	e001      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d03a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002944:	2b05      	cmp	r3, #5
 8002946:	d821      	bhi.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002948:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002993 	.word	0x08002993
 8002954:	08002969 	.word	0x08002969
 8002958:	0800297b 	.word	0x0800297b
 800295c:	08002993 	.word	0x08002993
 8002960:	08002993 	.word	0x08002993
 8002964:	08002993 	.word	0x08002993
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	2101      	movs	r1, #1
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fab6 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002978:	e00c      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3324      	adds	r3, #36	; 0x24
 800297e:	2101      	movs	r1, #1
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fb5f 	bl	8003044 <RCCEx_PLL3_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800298a:	e003      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
      break;
 8002990:	e000      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	f023 0207 	bic.w	r2, r3, #7
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	4953      	ldr	r1, [pc, #332]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	658b      	str	r3, [r1, #88]	; 0x58
 80029ae:	e001      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d04b      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ca:	d02e      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80029cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d0:	d828      	bhi.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d6:	d02a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d822      	bhi.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80029de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029e2:	d026      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80029e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029e8:	d81c      	bhi.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80029ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ee:	d010      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80029f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f4:	d816      	bhi.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01d      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80029fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029fe:	d111      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fa6a 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002a10:	e012      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3324      	adds	r3, #36	; 0x24
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fb13 	bl	8003044 <RCCEx_PLL3_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002a22:	e009      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	75fb      	strb	r3, [r7, #23]
      break;
 8002a28:	e006      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e004      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e002      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4c:	492a      	ldr	r1, [pc, #168]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	654b      	str	r3, [r1, #84]	; 0x54
 8002a52:	e001      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d04d      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002a6e:	d02e      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002a70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002a74:	d828      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7a:	d02a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a80:	d822      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002a82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a86:	d026      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a8c:	d81c      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a98:	d816      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01d      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fa18 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ab4:	e012      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3324      	adds	r3, #36	; 0x24
 8002aba:	2102      	movs	r1, #2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fac1 	bl	8003044 <RCCEx_PLL3_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ac6:	e009      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	75fb      	strb	r3, [r7, #23]
      break;
 8002acc:	e006      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e004      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002af0:	4901      	ldr	r1, [pc, #4]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	658b      	str	r3, [r1, #88]	; 0x58
 8002af6:	e003      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002af8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d04b      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b12:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002b16:	d02e      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002b18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002b1c:	d828      	bhi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b22:	d02a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b28:	d822      	bhi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002b2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002b2e:	d026      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002b30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002b34:	d81c      	bhi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b3a:	d010      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b40:	d816      	bhi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01d      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4a:	d111      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f9c4 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002b5c:	e012      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3324      	adds	r3, #36	; 0x24
 8002b62:	2102      	movs	r1, #2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fa6d 	bl	8003044 <RCCEx_PLL3_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002b6e:	e009      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	75fb      	strb	r3, [r7, #23]
      break;
 8002b74:	e006      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002b76:	bf00      	nop
 8002b78:	e004      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e002      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002b82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002b8a:	4b9d      	ldr	r3, [pc, #628]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b98:	4999      	ldr	r1, [pc, #612]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	658b      	str	r3, [r1, #88]	; 0x58
 8002b9e:	e001      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d10a      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3324      	adds	r3, #36	; 0x24
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fa3e 	bl	8003044 <RCCEx_PLL3_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002bd2:	4b8b      	ldr	r3, [pc, #556]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be0:	4987      	ldr	r1, [pc, #540]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfc:	d10a      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3324      	adds	r3, #36	; 0x24
 8002c02:	2102      	movs	r1, #2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fa1d 	bl	8003044 <RCCEx_PLL3_Config>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c14:	4b7a      	ldr	r3, [pc, #488]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c22:	4977      	ldr	r1, [pc, #476]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d034      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c3e:	d01d      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c44:	d817      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4e:	d009      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002c50:	e011      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f941 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002c62:	e00c      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3324      	adds	r3, #36	; 0x24
 8002c68:	2102      	movs	r1, #2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f9ea 	bl	8003044 <RCCEx_PLL3_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002c74:	e003      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7a:	e000      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c84:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c92:	495b      	ldr	r1, [pc, #364]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	658b      	str	r3, [r1, #88]	; 0x58
 8002c98:	e001      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d033      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cb4:	d01c      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002cb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cba:	d816      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cc0:	d003      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc6:	d007      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002cc8:	e00f      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cca:	4b4d      	ldr	r3, [pc, #308]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	4a4c      	ldr	r2, [pc, #304]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002cd6:	e00c      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3324      	adds	r3, #36	; 0x24
 8002cdc:	2101      	movs	r1, #1
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f9b0 	bl	8003044 <RCCEx_PLL3_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ce8:	e003      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
      break;
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cf8:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d06:	493e      	ldr	r1, [pc, #248]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	654b      	str	r3, [r1, #84]	; 0x54
 8002d0c:	e001      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d029      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2a:	d007      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002d2c:	e00f      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	2102      	movs	r1, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f8cc 	bl	8002ee0 <RCCEx_PLL2_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002d4c:	e002      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
      break;
 8002d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	4926      	ldr	r1, [pc, #152]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d6c:	e001      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
 8002d70:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3324      	adds	r3, #36	; 0x24
 8002d82:	2102      	movs	r1, #2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f95d 	bl	8003044 <RCCEx_PLL3_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d033      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da8:	d017      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dae:	d811      	bhi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db4:	d013      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dba:	d80b      	bhi.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8002dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002dd2:	e007      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd8:	e004      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df6:	4902      	ldr	r1, [pc, #8]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	654b      	str	r3, [r1, #84]	; 0x54
 8002dfc:	e004      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	492e      	ldr	r1, [pc, #184]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002e32:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e40:	4926      	ldr	r1, [pc, #152]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e5e:	491f      	ldr	r1, [pc, #124]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00d      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e7a:	6113      	str	r3, [r2, #16]
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e86:	4915      	ldr	r1, [pc, #84]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da08      	bge.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea0:	490e      	ldr	r1, [pc, #56]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	4906      	ldr	r1, [pc, #24]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002ec6:	7dbb      	ldrb	r3, [r7, #22]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	58024400 	.word	0x58024400

08002ee0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002eee:	4b53      	ldr	r3, [pc, #332]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d101      	bne.n	8002efe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e099      	b.n	8003032 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002efe:	4b4f      	ldr	r3, [pc, #316]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a4e      	ldr	r2, [pc, #312]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0a:	f7fd fce9 	bl	80008e0 <HAL_GetTick>
 8002f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002f12:	f7fd fce5 	bl	80008e0 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e086      	b.n	8003032 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f24:	4b45      	ldr	r3, [pc, #276]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	031b      	lsls	r3, r3, #12
 8002f3e:	493f      	ldr	r1, [pc, #252]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	628b      	str	r3, [r1, #40]	; 0x28
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	025b      	lsls	r3, r3, #9
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	061b      	lsls	r3, r3, #24
 8002f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f74:	4931      	ldr	r1, [pc, #196]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002f7a:	4b30      	ldr	r3, [pc, #192]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	492d      	ldr	r1, [pc, #180]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	f023 0220 	bic.w	r2, r3, #32
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4928      	ldr	r1, [pc, #160]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002f9e:	4b27      	ldr	r3, [pc, #156]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	4a26      	ldr	r2, [pc, #152]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fa4:	f023 0310 	bic.w	r3, r3, #16
 8002fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <RCCEx_PLL2_Config+0x160>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	69d2      	ldr	r2, [r2, #28]
 8002fb6:	00d2      	lsls	r2, r2, #3
 8002fb8:	4920      	ldr	r1, [pc, #128]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fc4:	f043 0310 	orr.w	r3, r3, #16
 8002fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002fdc:	e00f      	b.n	8002ffe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002fe4:	4b15      	ldr	r3, [pc, #84]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	4a14      	ldr	r2, [pc, #80]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ff0:	e005      	b.n	8002ffe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	4a11      	ldr	r2, [pc, #68]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8002ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a0e      	ldr	r2, [pc, #56]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8003004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300a:	f7fd fc69 	bl	80008e0 <HAL_GetTick>
 800300e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003010:	e008      	b.n	8003024 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003012:	f7fd fc65 	bl	80008e0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e006      	b.n	8003032 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <RCCEx_PLL2_Config+0x15c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	58024400 	.word	0x58024400
 8003040:	ffff0007 	.word	0xffff0007

08003044 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003052:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b03      	cmp	r3, #3
 800305c:	d101      	bne.n	8003062 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e099      	b.n	8003196 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003062:	4b4f      	ldr	r3, [pc, #316]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a4e      	ldr	r2, [pc, #312]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306e:	f7fd fc37 	bl	80008e0 <HAL_GetTick>
 8003072:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003074:	e008      	b.n	8003088 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003076:	f7fd fc33 	bl	80008e0 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e086      	b.n	8003196 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003088:	4b45      	ldr	r3, [pc, #276]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003094:	4b42      	ldr	r3, [pc, #264]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	051b      	lsls	r3, r3, #20
 80030a2:	493f      	ldr	r1, [pc, #252]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	628b      	str	r3, [r1, #40]	; 0x28
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	025b      	lsls	r3, r3, #9
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	061b      	lsls	r3, r3, #24
 80030d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030d8:	4931      	ldr	r1, [pc, #196]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	492d      	ldr	r1, [pc, #180]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4928      	ldr	r1, [pc, #160]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <RCCEx_PLL3_Config+0x160>)
 8003114:	4013      	ands	r3, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	69d2      	ldr	r2, [r2, #28]
 800311a:	00d2      	lsls	r2, r2, #3
 800311c:	4920      	ldr	r1, [pc, #128]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 800311e:	4313      	orrs	r3, r2
 8003120:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003134:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 800313a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800313e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003140:	e00f      	b.n	8003162 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 800314e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003154:	e005      	b.n	8003162 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	4a11      	ldr	r2, [pc, #68]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 800315c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003160:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003162:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316e:	f7fd fbb7 	bl	80008e0 <HAL_GetTick>
 8003172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003174:	e008      	b.n	8003188 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003176:	f7fd fbb3 	bl	80008e0 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e006      	b.n	8003196 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <RCCEx_PLL3_Config+0x15c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	58024400 	.word	0x58024400
 80031a4:	ffff0007 	.word	0xffff0007

080031a8 <__libc_init_array>:
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	4d0d      	ldr	r5, [pc, #52]	; (80031e0 <__libc_init_array+0x38>)
 80031ac:	4c0d      	ldr	r4, [pc, #52]	; (80031e4 <__libc_init_array+0x3c>)
 80031ae:	1b64      	subs	r4, r4, r5
 80031b0:	10a4      	asrs	r4, r4, #2
 80031b2:	2600      	movs	r6, #0
 80031b4:	42a6      	cmp	r6, r4
 80031b6:	d109      	bne.n	80031cc <__libc_init_array+0x24>
 80031b8:	4d0b      	ldr	r5, [pc, #44]	; (80031e8 <__libc_init_array+0x40>)
 80031ba:	4c0c      	ldr	r4, [pc, #48]	; (80031ec <__libc_init_array+0x44>)
 80031bc:	f000 f820 	bl	8003200 <_init>
 80031c0:	1b64      	subs	r4, r4, r5
 80031c2:	10a4      	asrs	r4, r4, #2
 80031c4:	2600      	movs	r6, #0
 80031c6:	42a6      	cmp	r6, r4
 80031c8:	d105      	bne.n	80031d6 <__libc_init_array+0x2e>
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
 80031cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d0:	4798      	blx	r3
 80031d2:	3601      	adds	r6, #1
 80031d4:	e7ee      	b.n	80031b4 <__libc_init_array+0xc>
 80031d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031da:	4798      	blx	r3
 80031dc:	3601      	adds	r6, #1
 80031de:	e7f2      	b.n	80031c6 <__libc_init_array+0x1e>
 80031e0:	08003228 	.word	0x08003228
 80031e4:	08003228 	.word	0x08003228
 80031e8:	08003228 	.word	0x08003228
 80031ec:	0800322c 	.word	0x0800322c

080031f0 <memset>:
 80031f0:	4402      	add	r2, r0
 80031f2:	4603      	mov	r3, r0
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d100      	bne.n	80031fa <memset+0xa>
 80031f8:	4770      	bx	lr
 80031fa:	f803 1b01 	strb.w	r1, [r3], #1
 80031fe:	e7f9      	b.n	80031f4 <memset+0x4>

08003200 <_init>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	bf00      	nop
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr

0800320c <_fini>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	bf00      	nop
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr
