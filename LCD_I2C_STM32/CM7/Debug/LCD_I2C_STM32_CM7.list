
LCD_I2C_STM32_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a4  080039a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080039a4  080039a4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039a4  080039a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080039ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000010  080039bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400007c  080039bc  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010891  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de2  00000000  00000000  000308cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  000326b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00033158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ae18  00000000  00000000  00033b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df4a  00000000  00000000  0006e938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00173c2f  00000000  00000000  0007c882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f04b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab8  00000000  00000000  001f0504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003970 	.word	0x08003970

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003970 	.word	0x08003970

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <_ZN7LCD_I2C12LCD_I2C_INITEv>:

extern I2C_HandleTypeDef hi2c1;


LCD_I2C_STATE LCD_I2C::LCD_I2C_INIT ( void )
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

	HAL_Delay(50);  // wait for >40ms
 800040c:	2032      	movs	r0, #50	; 0x32
 800040e:	f000 fb43 	bl	8000a98 <HAL_Delay>
	LCD_I2C::LCD_I2C_SEND_CMD (0x30);
 8000412:	2130      	movs	r1, #48	; 0x30
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f000 f83d 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>
	HAL_Delay(5);  // wait for >4.1ms
 800041a:	2005      	movs	r0, #5
 800041c:	f000 fb3c 	bl	8000a98 <HAL_Delay>
	LCD_I2C::LCD_I2C_SEND_CMD (0x30);
 8000420:	2130      	movs	r1, #48	; 0x30
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 f836 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>
	HAL_Delay(1);  // wait for >100us
 8000428:	2001      	movs	r0, #1
 800042a:	f000 fb35 	bl	8000a98 <HAL_Delay>
	LCD_I2C::LCD_I2C_SEND_CMD (0x30);
 800042e:	2130      	movs	r1, #48	; 0x30
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f000 f82f 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>
	HAL_Delay(10);
 8000436:	200a      	movs	r0, #10
 8000438:	f000 fb2e 	bl	8000a98 <HAL_Delay>
	LCD_I2C::LCD_I2C_SEND_CMD (0x20);  // 4bit mode
 800043c:	2120      	movs	r1, #32
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f000 f828 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>
	HAL_Delay(10);
 8000444:	200a      	movs	r0, #10
 8000446:	f000 fb27 	bl	8000a98 <HAL_Delay>

	// Dislay Initialisation
	LCD_I2C::LCD_I2C_SEND_CMD (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800044a:	2128      	movs	r1, #40	; 0x28
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f821 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>
	HAL_Delay(1);
 8000452:	2001      	movs	r0, #1
 8000454:	f000 fb20 	bl	8000a98 <HAL_Delay>
	LCD_I2C::LCD_I2C_SEND_CMD (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000458:	2108      	movs	r1, #8
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f000 f81a 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>
	HAL_Delay(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f000 fb19 	bl	8000a98 <HAL_Delay>
	LCD_I2C::LCD_I2C_SEND_CMD (0x01);  // clear display
 8000466:	2101      	movs	r1, #1
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f813 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>
	HAL_Delay(1);
 800046e:	2001      	movs	r0, #1
 8000470:	f000 fb12 	bl	8000a98 <HAL_Delay>
	LCD_I2C::LCD_I2C_SEND_CMD (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000474:	2106      	movs	r1, #6
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f000 f80c 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>
	HAL_Delay(1);
 800047c:	2001      	movs	r0, #1
 800047e:	f000 fb0b 	bl	8000a98 <HAL_Delay>
	LCD_I2C::LCD_I2C_SEND_CMD (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000482:	210c      	movs	r1, #12
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f000 f805 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>

	return ( LCD_I2C_OKAY ) ;
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>:
 * We are sending command so RS Bit must be set to 0
 * Each time we are sending four bits we need to alter EN bit between 1 and 0
 */

LCD_I2C_STATE LCD_I2C::LCD_I2C_SEND_CMD (char Command )
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af02      	add	r7, sp, #8
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
	char command_low , command_high ;
	uint8_t data [ 4 ] ;
	command_high =  ( Command & 0b11110000 ) ;
 80004a0:	78fb      	ldrb	r3, [r7, #3]
 80004a2:	f023 030f 	bic.w	r3, r3, #15
 80004a6:	73fb      	strb	r3, [r7, #15]
	command_low  =  ( Command << 4 ) & (0b11110000) ;
 80004a8:	78fb      	ldrb	r3, [r7, #3]
 80004aa:	011b      	lsls	r3, r3, #4
 80004ac:	73bb      	strb	r3, [r7, #14]

	data [0] = ( command_high | LCD_I2C_SEND_CMD_EN_HIGH  ) ;
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	f043 030c 	orr.w	r3, r3, #12
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	723b      	strb	r3, [r7, #8]
	data [1] = ( command_high | LCD_I2C_SEND_CMD_EN_LOW   ) ;
 80004b8:	7bfb      	ldrb	r3, [r7, #15]
 80004ba:	f043 0308 	orr.w	r3, r3, #8
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	727b      	strb	r3, [r7, #9]
	data [2] = ( command_low  | LCD_I2C_SEND_CMD_EN_HIGH  ) ;
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	f043 030c 	orr.w	r3, r3, #12
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	72bb      	strb	r3, [r7, #10]
	data [3] = ( command_low  | LCD_I2C_SEND_CMD_EN_LOW   ) ;
 80004cc:	7bbb      	ldrb	r3, [r7, #14]
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef Outcome = HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data, 4, 100) ;
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4807      	ldr	r0, [pc, #28]	; (8000500 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc+0x6c>)
 80004e4:	f000 fe2c 	bl	8001140 <HAL_I2C_Master_Transmit>
 80004e8:	4603      	mov	r3, r0
 80004ea:	737b      	strb	r3, [r7, #13]
	if (Outcome == HAL_OK ){ return ( LCD_I2C_OKAY ) ; }
 80004ec:	7b7b      	ldrb	r3, [r7, #13]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d101      	bne.n	80004f6 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc+0x62>
 80004f2:	2300      	movs	r3, #0
 80004f4:	e000      	b.n	80004f8 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc+0x64>
	else {return ( LCD_I2C_FAIL ) ; }
 80004f6:	2301      	movs	r3, #1
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	2400002c 	.word	0x2400002c

08000504 <_ZN7LCD_I2C17LCD_I2C_SEND_DATAEc>:


LCD_I2C_STATE LCD_I2C::LCD_I2C_SEND_DATA (char Command )
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af02      	add	r7, sp, #8
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
	char command_low , command_high ;
	uint8_t data [ 4 ] ;
	command_high =  ( Command & 0xf0 ) ; // extracting 4 MSB bits of the 8 LSB bits
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	f023 030f 	bic.w	r3, r3, #15
 8000516:	73fb      	strb	r3, [r7, #15]
	command_low = ( ( Command << 4 ) & 0xf0 ) ; // extracting 4 MSB bits of the 8 MSB bits
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	011b      	lsls	r3, r3, #4
 800051c:	73bb      	strb	r3, [r7, #14]

	data [ 0 ] =  command_high | LCD_I2C_SEND_DATA_EN_HIGH   ;
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	f043 030d 	orr.w	r3, r3, #13
 8000524:	b2db      	uxtb	r3, r3
 8000526:	723b      	strb	r3, [r7, #8]
	data [ 1 ] =  command_high | LCD_I2C_SEND_DATA_EN_LOW    ;
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	f043 0309 	orr.w	r3, r3, #9
 800052e:	b2db      	uxtb	r3, r3
 8000530:	727b      	strb	r3, [r7, #9]
	data [ 2 ] =  command_low  | LCD_I2C_SEND_DATA_EN_HIGH   ;
 8000532:	7bbb      	ldrb	r3, [r7, #14]
 8000534:	f043 030d 	orr.w	r3, r3, #13
 8000538:	b2db      	uxtb	r3, r3
 800053a:	72bb      	strb	r3, [r7, #10]
	data [ 3 ] =  command_low  | LCD_I2C_SEND_DATA_EN_LOW    ;
 800053c:	7bbb      	ldrb	r3, [r7, #14]
 800053e:	f043 0309 	orr.w	r3, r3, #9
 8000542:	b2db      	uxtb	r3, r3
 8000544:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef Outcome = HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data, 4, 100) ;
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <_ZN7LCD_I2C17LCD_I2C_SEND_DATAEc+0x6c>)
 8000554:	f000 fdf4 	bl	8001140 <HAL_I2C_Master_Transmit>
 8000558:	4603      	mov	r3, r0
 800055a:	737b      	strb	r3, [r7, #13]
	if (Outcome == HAL_OK ){ return ( LCD_I2C_OKAY ) ; }
 800055c:	7b7b      	ldrb	r3, [r7, #13]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <_ZN7LCD_I2C17LCD_I2C_SEND_DATAEc+0x62>
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <_ZN7LCD_I2C17LCD_I2C_SEND_DATAEc+0x64>
	else {return ( LCD_I2C_FAIL) ; }
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2400002c 	.word	0x2400002c

08000574 <_ZN7LCD_I2C19LCD_I2C_SEND_STRINGEPc>:


LCD_I2C_STATE LCD_I2C::LCD_I2C_SEND_STRING (char * str)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	while (*str)  LCD_I2C::LCD_I2C_SEND_DATA(*str ++ ) ;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d008      	beq.n	8000598 <_ZN7LCD_I2C19LCD_I2C_SEND_STRINGEPc+0x24>
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	1c5a      	adds	r2, r3, #1
 800058a:	603a      	str	r2, [r7, #0]
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4619      	mov	r1, r3
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff ffb7 	bl	8000504 <_ZN7LCD_I2C17LCD_I2C_SEND_DATAEc>
 8000596:	e7f2      	b.n	800057e <_ZN7LCD_I2C19LCD_I2C_SEND_STRINGEPc+0xa>
}
 8000598:	bf00      	nop
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
	LCD_I2C EUROBOT_Screen ;
	/* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 f9e3 	bl	8000974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f815 	bl	80005dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f8ed 	bl	8000790 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80005b6:	f000 f89d 	bl	80006f4 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
	EUROBOT_Screen.LCD_I2C_INIT() ;
 80005ba:	463b      	mov	r3, r7
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff21 	bl	8000404 <_ZN7LCD_I2C12LCD_I2C_INITEv>

	EUROBOT_Screen.LCD_I2C_SEND_CMD(0x80|0x00);
 80005c2:	463b      	mov	r3, r7
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ff64 	bl	8000494 <_ZN7LCD_I2C16LCD_I2C_SEND_CMDEc>
	EUROBOT_Screen.LCD_I2C_SEND_STRING("HELLO WORLD");
 80005cc:	463b      	mov	r3, r7
 80005ce:	4902      	ldr	r1, [pc, #8]	; (80005d8 <main+0x34>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffcf 	bl	8000574 <_ZN7LCD_I2C19LCD_I2C_SEND_STRINGEPc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x32>
 80005d8:	08003988 	.word	0x08003988

080005dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09c      	sub	sp, #112	; 0x70
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e6:	224c      	movs	r2, #76	; 0x4c
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f9b8 	bl	8003960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2220      	movs	r2, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f9b2 	bl	8003960 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005fc:	2004      	movs	r0, #4
 80005fe:	f001 f929 	bl	8001854 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4b39      	ldr	r3, [pc, #228]	; (80006ec <_Z18SystemClock_Configv+0x110>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	4a38      	ldr	r2, [pc, #224]	; (80006ec <_Z18SystemClock_Configv+0x110>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000612:	4b36      	ldr	r3, [pc, #216]	; (80006ec <_Z18SystemClock_Configv+0x110>)
 8000614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <_Z18SystemClock_Configv+0x114>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a32      	ldr	r2, [pc, #200]	; (80006f0 <_Z18SystemClock_Configv+0x114>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <_Z18SystemClock_Configv+0x114>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <_Z18SystemClock_Configv+0x114>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000644:	bf14      	ite	ne
 8000646:	2301      	movne	r3, #1
 8000648:	2300      	moveq	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d000      	beq.n	8000652 <_Z18SystemClock_Configv+0x76>
 8000650:	e7f2      	b.n	8000638 <_Z18SystemClock_Configv+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000656:	2301      	movs	r3, #1
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2300      	movs	r3, #0
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800066a:	2312      	movs	r3, #18
 800066c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800067a:	230c      	movs	r3, #12
 800067c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800067e:	2300      	movs	r3, #0
 8000680:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f93c 	bl	8001908 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf14      	ite	ne
 8000696:	2301      	movne	r3, #1
 8000698:	2300      	moveq	r3, #0
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 80006a0:	f000 f890 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	233f      	movs	r3, #63	; 0x3f
 80006a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2303      	movs	r3, #3
 80006aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 80006ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2101      	movs	r1, #1
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fd4a 	bl	8002164 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 80006e0:	f000 f870 	bl	80007c4 <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3770      	adds	r7, #112	; 0x70
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58000400 	.word	0x58000400
 80006f0:	58024800 	.word	0x58024800

080006f4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 80006fa:	4a23      	ldr	r2, [pc, #140]	; (8000788 <_ZL12MX_I2C1_Initv+0x94>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 8000700:	4a22      	ldr	r2, [pc, #136]	; (800078c <_ZL12MX_I2C1_Initv+0x98>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 800070c:	2201      	movs	r2, #1
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072e:	4815      	ldr	r0, [pc, #84]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 8000730:	f000 fc76 	bl	8001020 <HAL_I2C_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	bf14      	ite	ne
 800073a:	2301      	movne	r3, #1
 800073c:	2300      	moveq	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000744:	f000 f83e 	bl	80007c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 800074c:	f000 ffea 	bl	8001724 <HAL_I2CEx_ConfigAnalogFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	bf14      	ite	ne
 8000756:	2301      	movne	r3, #1
 8000758:	2300      	moveq	r3, #0
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000760:	f000 f830 	bl	80007c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4807      	ldr	r0, [pc, #28]	; (8000784 <_ZL12MX_I2C1_Initv+0x90>)
 8000768:	f001 f827 	bl	80017ba <HAL_I2CEx_ConfigDigitalFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf14      	ite	ne
 8000772:	2301      	movne	r3, #1
 8000774:	2300      	moveq	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 800077c:	f000 f822 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2400002c 	.word	0x2400002c
 8000788:	40005400 	.word	0x40005400
 800078c:	00808cd2 	.word	0x00808cd2

08000790 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <_ZL12MX_GPIO_Initv+0x30>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079c:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <_ZL12MX_GPIO_Initv+0x30>)
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <_ZL12MX_GPIO_Initv+0x30>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	58024400 	.word	0x58024400

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_MspInit+0x30>)
 80007d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007dc:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x30>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x30>)
 80007e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	58024400 	.word	0x58024400

08000804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0b8      	sub	sp, #224	; 0xe0
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	22bc      	movs	r2, #188	; 0xbc
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f003 f89b 	bl	8003960 <memset>
  if(hi2c->Instance==I2C1)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a24      	ldr	r2, [pc, #144]	; (80008c0 <HAL_I2C_MspInit+0xbc>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d141      	bne.n	80008b8 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000834:	2308      	movs	r3, #8
 8000836:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4618      	mov	r0, r3
 8000844:	f001 ffbe 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800084e:	f7ff ffb9 	bl	80007c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <HAL_I2C_MspInit+0xc0>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	4a1a      	ldr	r2, [pc, #104]	; (80008c4 <HAL_I2C_MspInit+0xc0>)
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <HAL_I2C_MspInit+0xc0>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000870:	23c0      	movs	r3, #192	; 0xc0
 8000872:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000876:	2312      	movs	r3, #18
 8000878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087c:	2301      	movs	r3, #1
 800087e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000888:	2304      	movs	r3, #4
 800088a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <HAL_I2C_MspInit+0xc4>)
 8000896:	f000 fa13 	bl	8000cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_I2C_MspInit+0xc0>)
 800089c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008a0:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_I2C_MspInit+0xc0>)
 80008a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_I2C_MspInit+0xc0>)
 80008ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	37e0      	adds	r7, #224	; 0xe0
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40005400 	.word	0x40005400
 80008c4:	58024400 	.word	0x58024400
 80008c8:	58020400 	.word	0x58020400

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 f89e 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000958 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000924:	f7ff fcd8 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	; (8000960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094e:	f002 ffe3 	bl	8003918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000952:	f7ff fe27 	bl	80005a4 <main>
  bx  lr
 8000956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800095c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000960:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000964:	080039ac 	.word	0x080039ac
  ldr r2, =_sbss
 8000968:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800096c:	2400007c 	.word	0x2400007c

08000970 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC3_IRQHandler>
	...

08000974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097a:	2003      	movs	r0, #3
 800097c:	f000 f96e 	bl	8000c5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000980:	f001 fda6 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8000984:	4602      	mov	r2, r0
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_Init+0x68>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	4913      	ldr	r1, [pc, #76]	; (80009e0 <HAL_Init+0x6c>)
 8000992:	5ccb      	ldrb	r3, [r1, r3]
 8000994:	f003 031f 	and.w	r3, r3, #31
 8000998:	fa22 f303 	lsr.w	r3, r2, r3
 800099c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_Init+0x68>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_Init+0x6c>)
 80009a8:	5cd3      	ldrb	r3, [r2, r3]
 80009aa:	f003 031f 	and.w	r3, r3, #31
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	fa22 f303 	lsr.w	r3, r2, r3
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <HAL_Init+0x70>)
 80009b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009b8:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <HAL_Init+0x74>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f814 	bl	80009ec <HAL_InitTick>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e002      	b.n	80009d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009ce:	f7ff feff 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58024400 	.word	0x58024400
 80009e0:	08003994 	.word	0x08003994
 80009e4:	24000004 	.word	0x24000004
 80009e8:	24000000 	.word	0x24000000

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_InitTick+0x60>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e021      	b.n	8000a44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <HAL_InitTick+0x64>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_InitTick+0x60>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f945 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f91d 	bl	8000c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x68>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2400000c 	.word	0x2400000c
 8000a50:	24000000 	.word	0x24000000
 8000a54:	24000008 	.word	0x24000008

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	2400000c 	.word	0x2400000c
 8000a7c:	24000078 	.word	0x24000078

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	24000078 	.word	0x24000078

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffde 	bl	8000a80 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2400000c 	.word	0x2400000c

08000ae0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_GetREVID+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	0c1b      	lsrs	r3, r3, #16
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	5c001000 	.word	0x5c001000

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <__NVIC_SetPriorityGrouping+0x40>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x40>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	05fa0000 	.word	0x05fa0000

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db0a      	blt.n	8000b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <__NVIC_SetPriority+0x4c>)
 8000b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	440b      	add	r3, r1
 8000b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b84:	e00a      	b.n	8000b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <__NVIC_SetPriority+0x50>)
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	3b04      	subs	r3, #4
 8000b94:	0112      	lsls	r2, r2, #4
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	440b      	add	r3, r1
 8000b9a:	761a      	strb	r2, [r3, #24]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f1c3 0307 	rsb	r3, r3, #7
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	bf28      	it	cs
 8000bce:	2304      	movcs	r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d902      	bls.n	8000be0 <NVIC_EncodePriority+0x30>
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	e000      	b.n	8000be2 <NVIC_EncodePriority+0x32>
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43d9      	mvns	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	4313      	orrs	r3, r2
         );
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c28:	d301      	bcc.n	8000c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00f      	b.n	8000c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <SysTick_Config+0x40>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c36:	210f      	movs	r1, #15
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f7ff ff8e 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <SysTick_Config+0x40>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <SysTick_Config+0x40>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff47 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c80:	f7ff ff5e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f7ff ff90 	bl	8000bb0 <NVIC_EncodePriority>
 8000c90:	4602      	mov	r2, r0
 8000c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff5f 	bl	8000b5c <__NVIC_SetPriority>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffb2 	bl	8000c18 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cce:	4b89      	ldr	r3, [pc, #548]	; (8000ef4 <HAL_GPIO_Init+0x234>)
 8000cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cd2:	e194      	b.n	8000ffe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f000 8186 	beq.w	8000ff8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d005      	beq.n	8000d04 <HAL_GPIO_Init+0x44>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d130      	bne.n	8000d66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	f003 0201 	and.w	r2, r3, #1
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d017      	beq.n	8000da2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d123      	bne.n	8000df6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	69b9      	ldr	r1, [r7, #24]
 8000df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0203 	and.w	r2, r3, #3
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 80e0 	beq.w	8000ff8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_GPIO_Init+0x238>)
 8000e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e3e:	4a2e      	ldr	r2, [pc, #184]	; (8000ef8 <HAL_GPIO_Init+0x238>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_GPIO_Init+0x238>)
 8000e4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e56:	4a29      	ldr	r2, [pc, #164]	; (8000efc <HAL_GPIO_Init+0x23c>)
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <HAL_GPIO_Init+0x240>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d052      	beq.n	8000f28 <HAL_GPIO_Init+0x268>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <HAL_GPIO_Init+0x244>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d031      	beq.n	8000eee <HAL_GPIO_Init+0x22e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <HAL_GPIO_Init+0x248>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d02b      	beq.n	8000eea <HAL_GPIO_Init+0x22a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a1d      	ldr	r2, [pc, #116]	; (8000f0c <HAL_GPIO_Init+0x24c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d025      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <HAL_GPIO_Init+0x250>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d01f      	beq.n	8000ee2 <HAL_GPIO_Init+0x222>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <HAL_GPIO_Init+0x254>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d019      	beq.n	8000ede <HAL_GPIO_Init+0x21e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <HAL_GPIO_Init+0x258>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d013      	beq.n	8000eda <HAL_GPIO_Init+0x21a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <HAL_GPIO_Init+0x25c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d00d      	beq.n	8000ed6 <HAL_GPIO_Init+0x216>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_GPIO_Init+0x260>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x212>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <HAL_GPIO_Init+0x264>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_GPIO_Init+0x20e>
 8000eca:	2309      	movs	r3, #9
 8000ecc:	e02d      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000ece:	230a      	movs	r3, #10
 8000ed0:	e02b      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	e029      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	e027      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000eda:	2306      	movs	r3, #6
 8000edc:	e025      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000ede:	2305      	movs	r3, #5
 8000ee0:	e023      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	e021      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e01f      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e01d      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e01b      	b.n	8000f2a <HAL_GPIO_Init+0x26a>
 8000ef2:	bf00      	nop
 8000ef4:	58000080 	.word	0x58000080
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58000400 	.word	0x58000400
 8000f00:	58020000 	.word	0x58020000
 8000f04:	58020400 	.word	0x58020400
 8000f08:	58020800 	.word	0x58020800
 8000f0c:	58020c00 	.word	0x58020c00
 8000f10:	58021000 	.word	0x58021000
 8000f14:	58021400 	.word	0x58021400
 8000f18:	58021800 	.word	0x58021800
 8000f1c:	58021c00 	.word	0x58021c00
 8000f20:	58022000 	.word	0x58022000
 8000f24:	58022400 	.word	0x58022400
 8000f28:	2300      	movs	r3, #0
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	f002 0203 	and.w	r2, r2, #3
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	4093      	lsls	r3, r2
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3a:	4938      	ldr	r1, [pc, #224]	; (800101c <HAL_GPIO_Init+0x35c>)
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	f47f ae63 	bne.w	8000cd4 <HAL_GPIO_Init+0x14>
  }
}
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	58000400 	.word	0x58000400

08001020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e07f      	b.n	8001132 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d106      	bne.n	800104c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fbdc 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2224      	movs	r2, #36	; 0x24
 8001050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0201 	bic.w	r2, r2, #1
 8001062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d107      	bne.n	800109a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	e006      	b.n	80010a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d104      	bne.n	80010ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6859      	ldr	r1, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_I2C_Init+0x11c>)
 80010c6:	430b      	orrs	r3, r1
 80010c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69d9      	ldr	r1, [r3, #28]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	02008000 	.word	0x02008000

08001140 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af02      	add	r7, sp, #8
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	461a      	mov	r2, r3
 800114c:	460b      	mov	r3, r1
 800114e:	817b      	strh	r3, [r7, #10]
 8001150:	4613      	mov	r3, r2
 8001152:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b20      	cmp	r3, #32
 800115e:	f040 80da 	bne.w	8001316 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_I2C_Master_Transmit+0x30>
 800116c:	2302      	movs	r3, #2
 800116e:	e0d3      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001178:	f7ff fc82 	bl	8000a80 <HAL_GetTick>
 800117c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2319      	movs	r3, #25
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 f8f0 	bl	8001370 <I2C_WaitOnFlagUntilTimeout>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0be      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2221      	movs	r2, #33	; 0x21
 800119e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2210      	movs	r2, #16
 80011a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	893a      	ldrh	r2, [r7, #8]
 80011ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	2bff      	cmp	r3, #255	; 0xff
 80011ca:	d90e      	bls.n	80011ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	8979      	ldrh	r1, [r7, #10]
 80011da:	4b51      	ldr	r3, [pc, #324]	; (8001320 <HAL_I2C_Master_Transmit+0x1e0>)
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 fa6c 	bl	80016c0 <I2C_TransferConfig>
 80011e8:	e06c      	b.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	8979      	ldrh	r1, [r7, #10]
 80011fc:	4b48      	ldr	r3, [pc, #288]	; (8001320 <HAL_I2C_Master_Transmit+0x1e0>)
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 fa5b 	bl	80016c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800120a:	e05b      	b.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	6a39      	ldr	r1, [r7, #32]
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f8ed 	bl	80013f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e07b      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123a:	b29b      	uxth	r3, r3
 800123c:	3b01      	subs	r3, #1
 800123e:	b29a      	uxth	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001248:	3b01      	subs	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001254:	b29b      	uxth	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d034      	beq.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125e:	2b00      	cmp	r3, #0
 8001260:	d130      	bne.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	2200      	movs	r2, #0
 800126a:	2180      	movs	r1, #128	; 0x80
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f87f 	bl	8001370 <I2C_WaitOnFlagUntilTimeout>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e04d      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001280:	b29b      	uxth	r3, r3
 8001282:	2bff      	cmp	r3, #255	; 0xff
 8001284:	d90e      	bls.n	80012a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001290:	b2da      	uxtb	r2, r3
 8001292:	8979      	ldrh	r1, [r7, #10]
 8001294:	2300      	movs	r3, #0
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 fa0f 	bl	80016c0 <I2C_TransferConfig>
 80012a2:	e00f      	b.n	80012c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	8979      	ldrh	r1, [r7, #10]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f000 f9fe 	bl	80016c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d19e      	bne.n	800120c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	6a39      	ldr	r1, [r7, #32]
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 f8cc 	bl	8001470 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e01a      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2220      	movs	r2, #32
 80012e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_I2C_Master_Transmit+0x1e4>)
 80012f6:	400b      	ands	r3, r1
 80012f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001316:	2302      	movs	r3, #2
  }
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	80002000 	.word	0x80002000
 8001324:	fe00e800 	.word	0xfe00e800

08001328 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d103      	bne.n	8001346 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d007      	beq.n	8001364 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	619a      	str	r2, [r3, #24]
  }
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001380:	e022      	b.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d01e      	beq.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800138a:	f7ff fb79 	bl	8000a80 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d302      	bcc.n	80013a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d113      	bne.n	80013c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f043 0220 	orr.w	r2, r3, #32
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00f      	b.n	80013e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	4013      	ands	r3, r2
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	bf0c      	ite	eq
 80013d8:	2301      	moveq	r3, #1
 80013da:	2300      	movne	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d0cd      	beq.n	8001382 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013fc:	e02c      	b.n	8001458 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 f870 	bl	80014e8 <I2C_IsErrorOccurred>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e02a      	b.n	8001468 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d01e      	beq.n	8001458 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800141a:	f7ff fb31 	bl	8000a80 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	429a      	cmp	r2, r3
 8001428:	d302      	bcc.n	8001430 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d113      	bne.n	8001458 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f043 0220 	orr.w	r2, r3, #32
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2220      	movs	r2, #32
 8001440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e007      	b.n	8001468 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b02      	cmp	r3, #2
 8001464:	d1cb      	bne.n	80013fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800147c:	e028      	b.n	80014d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f830 	bl	80014e8 <I2C_IsErrorOccurred>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e026      	b.n	80014e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001492:	f7ff faf5 	bl	8000a80 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d302      	bcc.n	80014a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d113      	bne.n	80014d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f043 0220 	orr.w	r2, r3, #32
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e007      	b.n	80014e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	2b20      	cmp	r3, #32
 80014dc:	d1cf      	bne.n	800147e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	2b00      	cmp	r3, #0
 8001512:	d075      	beq.n	8001600 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2210      	movs	r2, #16
 800151a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800151c:	e056      	b.n	80015cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d052      	beq.n	80015cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001526:	f7ff faab 	bl	8000a80 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	429a      	cmp	r2, r3
 8001534:	d302      	bcc.n	800153c <I2C_IsErrorOccurred+0x54>
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d147      	bne.n	80015cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800154e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800155a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800155e:	d12e      	bne.n	80015be <I2C_IsErrorOccurred+0xd6>
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001566:	d02a      	beq.n	80015be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001568:	7cfb      	ldrb	r3, [r7, #19]
 800156a:	2b20      	cmp	r3, #32
 800156c:	d027      	beq.n	80015be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800157c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800157e:	f7ff fa7f 	bl	8000a80 <HAL_GetTick>
 8001582:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001584:	e01b      	b.n	80015be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001586:	f7ff fa7b 	bl	8000a80 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b19      	cmp	r3, #25
 8001592:	d914      	bls.n	80015be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	f043 0220 	orr.w	r2, r3, #32
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2220      	movs	r2, #32
 80015a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0320 	and.w	r3, r3, #32
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	d1dc      	bne.n	8001586 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d003      	beq.n	80015e2 <I2C_IsErrorOccurred+0xfa>
 80015da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d09d      	beq.n	800151e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80015e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d103      	bne.n	80015f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2220      	movs	r2, #32
 80015f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00b      	beq.n	800164c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001644:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800166e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001672:	2b00      	cmp	r3, #0
 8001674:	d01c      	beq.n	80016b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fe56 	bl	8001328 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6859      	ldr	r1, [r3, #4]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <I2C_IsErrorOccurred+0x1d4>)
 8001688:	400b      	ands	r3, r1
 800168a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	431a      	orrs	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2220      	movs	r2, #32
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80016b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	fe00e800 	.word	0xfe00e800

080016c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	817b      	strh	r3, [r7, #10]
 80016ce:	4613      	mov	r3, r2
 80016d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016d2:	897b      	ldrh	r3, [r7, #10]
 80016d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016d8:	7a7b      	ldrb	r3, [r7, #9]
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016e0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016ee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	0d5b      	lsrs	r3, r3, #21
 80016fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <I2C_TransferConfig+0x60>)
 8001700:	430b      	orrs	r3, r1
 8001702:	43db      	mvns	r3, r3
 8001704:	ea02 0103 	and.w	r1, r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	430a      	orrs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	03ff63ff 	.word	0x03ff63ff

08001724 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b20      	cmp	r3, #32
 8001738:	d138      	bne.n	80017ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001744:	2302      	movs	r3, #2
 8001746:	e032      	b.n	80017ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001776:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2220      	movs	r2, #32
 800179c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	e000      	b.n	80017ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017ac:	2302      	movs	r3, #2
  }
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	d139      	bne.n	8001844 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017da:	2302      	movs	r3, #2
 80017dc:	e033      	b.n	8001846 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2224      	movs	r2, #36	; 0x24
 80017ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800180c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4313      	orrs	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e000      	b.n	8001846 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001844:	2302      	movs	r3, #2
  }
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <HAL_PWREx_ConfigSupply+0xb0>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	2b06      	cmp	r3, #6
 8001866:	d00a      	beq.n	800187e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_PWREx_ConfigSupply+0xb0>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	d001      	beq.n	800187a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e040      	b.n	80018fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e03e      	b.n	80018fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_PWREx_ConfigSupply+0xb0>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001886:	491f      	ldr	r1, [pc, #124]	; (8001904 <HAL_PWREx_ConfigSupply+0xb0>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4313      	orrs	r3, r2
 800188c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800188e:	f7ff f8f7 	bl	8000a80 <HAL_GetTick>
 8001892:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001894:	e009      	b.n	80018aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001896:	f7ff f8f3 	bl	8000a80 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018a4:	d901      	bls.n	80018aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e028      	b.n	80018fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b6:	d1ee      	bne.n	8001896 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b1e      	cmp	r3, #30
 80018bc:	d008      	beq.n	80018d0 <HAL_PWREx_ConfigSupply+0x7c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b2e      	cmp	r3, #46	; 0x2e
 80018c2:	d005      	beq.n	80018d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b1d      	cmp	r3, #29
 80018c8:	d002      	beq.n	80018d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b2d      	cmp	r3, #45	; 0x2d
 80018ce:	d114      	bne.n	80018fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018d0:	f7ff f8d6 	bl	8000a80 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018d6:	e009      	b.n	80018ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018d8:	f7ff f8d2 	bl	8000a80 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018e6:	d901      	bls.n	80018ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e007      	b.n	80018fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d1ee      	bne.n	80018d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	58024800 	.word	0x58024800

08001908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	; 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f000 bc1d 	b.w	8002156 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8087 	beq.w	8001a38 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192a:	4b99      	ldr	r3, [pc, #612]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001934:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	2b10      	cmp	r3, #16
 800193e:	d007      	beq.n	8001950 <HAL_RCC_OscConfig+0x48>
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001942:	2b18      	cmp	r3, #24
 8001944:	d110      	bne.n	8001968 <HAL_RCC_OscConfig+0x60>
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d10b      	bne.n	8001968 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4b8f      	ldr	r3, [pc, #572]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x12e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d168      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e3f6      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0x78>
 8001972:	4b87      	ldr	r3, [pc, #540]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a86      	ldr	r2, [pc, #536]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e02e      	b.n	80019de <HAL_RCC_OscConfig+0xd6>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x9a>
 8001988:	4b81      	ldr	r3, [pc, #516]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a80      	ldr	r2, [pc, #512]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b7e      	ldr	r3, [pc, #504]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a7d      	ldr	r2, [pc, #500]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e01d      	b.n	80019de <HAL_RCC_OscConfig+0xd6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0xbe>
 80019ac:	4b78      	ldr	r3, [pc, #480]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a77      	ldr	r2, [pc, #476]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b75      	ldr	r3, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a74      	ldr	r2, [pc, #464]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0xd6>
 80019c6:	4b72      	ldr	r3, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a71      	ldr	r2, [pc, #452]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b6f      	ldr	r3, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6e      	ldr	r2, [pc, #440]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 80019d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d013      	beq.n	8001a0e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff f84b 	bl	8000a80 <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ee:	f7ff f847 	bl	8000a80 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e3aa      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a00:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0xe6>
 8001a0c:	e014      	b.n	8001a38 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f837 	bl	8000a80 <HAL_GetTick>
 8001a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a16:	f7ff f833 	bl	8000a80 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b64      	cmp	r3, #100	; 0x64
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e396      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f0      	bne.n	8001a16 <HAL_RCC_OscConfig+0x10e>
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80cb 	beq.w	8001bdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4b52      	ldr	r3, [pc, #328]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a4e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a50:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_RCC_OscConfig+0x164>
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	2b18      	cmp	r3, #24
 8001a60:	d156      	bne.n	8001b10 <HAL_RCC_OscConfig+0x208>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d151      	bne.n	8001b10 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6c:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_OscConfig+0x17c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e368      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a84:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 0219 	bic.w	r2, r3, #25
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	493f      	ldr	r1, [pc, #252]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a96:	f7fe fff3 	bl	8000a80 <HAL_GetTick>
 8001a9a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7fe ffef 	bl	8000a80 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e352      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ab0:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	f7ff f810 	bl	8000ae0 <HAL_GetREVID>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d817      	bhi.n	8001afa <HAL_RCC_OscConfig+0x1f2>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b40      	cmp	r3, #64	; 0x40
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1dc>
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ada:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae2:	e07b      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	031b      	lsls	r3, r3, #12
 8001af2:	4927      	ldr	r1, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af8:	e070      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	4921      	ldr	r1, [pc, #132]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0e:	e065      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d048      	beq.n	8001baa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 0219 	bic.w	r2, r3, #25
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	491a      	ldr	r1, [pc, #104]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7fe ffa9 	bl	8000a80 <HAL_GetTick>
 8001b2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b32:	f7fe ffa5 	bl	8000a80 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e308      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	f7fe ffc6 	bl	8000ae0 <HAL_GetREVID>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d81a      	bhi.n	8001b94 <HAL_RCC_OscConfig+0x28c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b40      	cmp	r3, #64	; 0x40
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_OscConfig+0x270>
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b74:	6053      	str	r3, [r2, #4]
 8001b76:	e031      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	031b      	lsls	r3, r3, #12
 8001b86:	4902      	ldr	r1, [pc, #8]	; (8001b90 <HAL_RCC_OscConfig+0x288>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e026      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
 8001b8e:	bf00      	nop
 8001b90:	58024400 	.word	0x58024400
 8001b94:	4b9a      	ldr	r3, [pc, #616]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	061b      	lsls	r3, r3, #24
 8001ba2:	4997      	ldr	r1, [pc, #604]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
 8001ba8:	e018      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	4b95      	ldr	r3, [pc, #596]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a94      	ldr	r2, [pc, #592]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7fe ff63 	bl	8000a80 <HAL_GetTick>
 8001bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7fe ff5f 	bl	8000a80 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e2c2      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bd0:	4b8b      	ldr	r3, [pc, #556]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f0      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80a9 	beq.w	8001d3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bea:	4b85      	ldr	r3, [pc, #532]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bf4:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d007      	beq.n	8001c10 <HAL_RCC_OscConfig+0x308>
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b18      	cmp	r3, #24
 8001c04:	d13a      	bne.n	8001c7c <HAL_RCC_OscConfig+0x374>
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d135      	bne.n	8001c7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c10:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_OscConfig+0x320>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b80      	cmp	r3, #128	; 0x80
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e296      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c28:	f7fe ff5a 	bl	8000ae0 <HAL_GetREVID>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d817      	bhi.n	8001c66 <HAL_RCC_OscConfig+0x35e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d108      	bne.n	8001c50 <HAL_RCC_OscConfig+0x348>
 8001c3e:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c46:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c4c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c4e:	e075      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c50:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	069b      	lsls	r3, r3, #26
 8001c5e:	4968      	ldr	r1, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c64:	e06a      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c66:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	061b      	lsls	r3, r3, #24
 8001c74:	4962      	ldr	r1, [pc, #392]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c7a:	e05f      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d042      	beq.n	8001d0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c84:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5d      	ldr	r2, [pc, #372]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7fe fef6 	bl	8000a80 <HAL_GetTick>
 8001c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c98:	f7fe fef2 	bl	8000a80 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e255      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001caa:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cb6:	f7fe ff13 	bl	8000ae0 <HAL_GetREVID>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d817      	bhi.n	8001cf4 <HAL_RCC_OscConfig+0x3ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d108      	bne.n	8001cde <HAL_RCC_OscConfig+0x3d6>
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cd4:	4a4a      	ldr	r2, [pc, #296]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cda:	6053      	str	r3, [r2, #4]
 8001cdc:	e02e      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
 8001cde:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	069b      	lsls	r3, r3, #26
 8001cec:	4944      	ldr	r1, [pc, #272]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
 8001cf2:	e023      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	493f      	ldr	r1, [pc, #252]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60cb      	str	r3, [r1, #12]
 8001d08:	e018      	b.n	8001d3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a3c      	ldr	r2, [pc, #240]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7fe feb3 	bl	8000a80 <HAL_GetTick>
 8001d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001d1e:	f7fe feaf 	bl	8000a80 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e212      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d30:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d036      	beq.n	8001db6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d019      	beq.n	8001d84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d54:	4a2a      	ldr	r2, [pc, #168]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7fe fe90 	bl	8000a80 <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d64:	f7fe fe8c 	bl	8000a80 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1ef      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x45c>
 8001d82:	e018      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7fe fe76 	bl	8000a80 <HAL_GetTick>
 8001d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d98:	f7fe fe72 	bl	8000a80 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1d5      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d039      	beq.n	8001e36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01c      	beq.n	8001e04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fe53 	bl	8000a80 <HAL_GetTick>
 8001dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001dde:	f7fe fe4f 	bl	8000a80 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1b2      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_OscConfig+0x4f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x4d6>
 8001dfc:	e01b      	b.n	8001e36 <HAL_RCC_OscConfig+0x52e>
 8001dfe:	bf00      	nop
 8001e00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e04:	4b9b      	ldr	r3, [pc, #620]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a9a      	ldr	r2, [pc, #616]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e10:	f7fe fe36 	bl	8000a80 <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001e18:	f7fe fe32 	bl	8000a80 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e195      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e2a:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8081 	beq.w	8001f46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e44:	4b8c      	ldr	r3, [pc, #560]	; (8002078 <HAL_RCC_OscConfig+0x770>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a8b      	ldr	r2, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x770>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e50:	f7fe fe16 	bl	8000a80 <HAL_GetTick>
 8001e54:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e58:	f7fe fe12 	bl	8000a80 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e175      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e6a:	4b83      	ldr	r3, [pc, #524]	; (8002078 <HAL_RCC_OscConfig+0x770>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0x584>
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	4a7c      	ldr	r2, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8a:	e02d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x5e0>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10c      	bne.n	8001eae <HAL_RCC_OscConfig+0x5a6>
 8001e94:	4b77      	ldr	r3, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a76      	ldr	r2, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	4b74      	ldr	r3, [pc, #464]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	4a73      	ldr	r2, [pc, #460]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001eac:	e01c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x5e0>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x5c8>
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a6e      	ldr	r2, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec2:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	4a6b      	ldr	r2, [pc, #428]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x5e0>
 8001ed0:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a67      	ldr	r2, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
 8001edc:	4b65      	ldr	r3, [pc, #404]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a64      	ldr	r2, [pc, #400]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d015      	beq.n	8001f1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7fe fdc6 	bl	8000a80 <HAL_GetTick>
 8001ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef8:	f7fe fdc2 	bl	8000a80 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e123      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f0e:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ee      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x5f0>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7fe fdb0 	bl	8000a80 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7fe fdac 	bl	8000a80 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e10d      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f3a:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ee      	bne.n	8001f24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8102 	beq.w	8002154 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f50:	4b48      	ldr	r3, [pc, #288]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f58:	2b18      	cmp	r3, #24
 8001f5a:	f000 80bd 	beq.w	80020d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	f040 809e 	bne.w	80020a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b42      	ldr	r3, [pc, #264]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a41      	ldr	r2, [pc, #260]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe fd84 	bl	8000a80 <HAL_GetTick>
 8001f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7fe fd80 	bl	8000a80 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e0e3      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9a:	4b36      	ldr	r3, [pc, #216]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_RCC_OscConfig+0x774>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	430a      	orrs	r2, r1
 8001fae:	4931      	ldr	r1, [pc, #196]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	061b      	lsls	r3, r3, #24
 8001fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fe4:	4923      	ldr	r1, [pc, #140]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	4a21      	ldr	r2, [pc, #132]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_RCC_OscConfig+0x778>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002002:	00d2      	lsls	r2, r2, #3
 8002004:	491b      	ldr	r1, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002006:	4313      	orrs	r3, r2
 8002008:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	f023 020c 	bic.w	r2, r3, #12
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4917      	ldr	r1, [pc, #92]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002018:	4313      	orrs	r3, r2
 800201a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	f023 0202 	bic.w	r2, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	4912      	ldr	r1, [pc, #72]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800202a:	4313      	orrs	r3, r2
 800202c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 800204c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002050:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_RCC_OscConfig+0x76c>)
 8002064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe fd09 	bl	8000a80 <HAL_GetTick>
 800206e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002070:	e011      	b.n	8002096 <HAL_RCC_OscConfig+0x78e>
 8002072:	bf00      	nop
 8002074:	58024400 	.word	0x58024400
 8002078:	58024800 	.word	0x58024800
 800207c:	fffffc0c 	.word	0xfffffc0c
 8002080:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe fcfc 	bl	8000a80 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e05f      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002096:	4b32      	ldr	r3, [pc, #200]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x77c>
 80020a2:	e057      	b.n	8002154 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a4:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fce6 	bl	8000a80 <HAL_GetTick>
 80020b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fce2 	bl	8000a80 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e045      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x7b0>
 80020d6:	e03d      	b.n	8002154 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_RCC_OscConfig+0x858>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d031      	beq.n	8002150 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f003 0203 	and.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d12a      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d122      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d11a      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	0a5b      	lsrs	r3, r3, #9
 800211e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d111      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	0c1b      	lsrs	r3, r3, #16
 8002130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002138:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d108      	bne.n	8002150 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	0e1b      	lsrs	r3, r3, #24
 8002142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3730      	adds	r7, #48	; 0x30
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	58024400 	.word	0x58024400

08002164 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e19c      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b8a      	ldr	r3, [pc, #552]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b87      	ldr	r3, [pc, #540]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 020f 	bic.w	r2, r3, #15
 800218e:	4985      	ldr	r1, [pc, #532]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b83      	ldr	r3, [pc, #524]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e184      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	4b7b      	ldr	r3, [pc, #492]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d908      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021c4:	4b78      	ldr	r3, [pc, #480]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	4975      	ldr	r1, [pc, #468]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d010      	beq.n	8002204 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	4b70      	ldr	r3, [pc, #448]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d908      	bls.n	8002204 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021f2:	4b6d      	ldr	r3, [pc, #436]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	496a      	ldr	r1, [pc, #424]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002200:	4313      	orrs	r3, r2
 8002202:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d010      	beq.n	8002232 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800221c:	429a      	cmp	r2, r3
 800221e:	d908      	bls.n	8002232 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002220:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	495e      	ldr	r1, [pc, #376]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800222e:	4313      	orrs	r3, r2
 8002230:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800224a:	429a      	cmp	r2, r3
 800224c:	d908      	bls.n	8002260 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800224e:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4953      	ldr	r1, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800225c:	4313      	orrs	r3, r2
 800225e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d010      	beq.n	800228e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	429a      	cmp	r2, r3
 800227a:	d908      	bls.n	800228e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f023 020f 	bic.w	r2, r3, #15
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4947      	ldr	r1, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800228a:	4313      	orrs	r3, r2
 800228c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d055      	beq.n	8002346 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800229a:	4b43      	ldr	r3, [pc, #268]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4940      	ldr	r1, [pc, #256]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022b4:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d121      	bne.n	8002304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0f6      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022cc:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d115      	bne.n	8002304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0ea      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0de      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022f4:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0d6      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002304:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f023 0207 	bic.w	r2, r3, #7
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4925      	ldr	r1, [pc, #148]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002312:	4313      	orrs	r3, r2
 8002314:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fbb3 	bl	8000a80 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231c:	e00a      	b.n	8002334 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231e:	f7fe fbaf 	bl	8000a80 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0be      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	429a      	cmp	r2, r3
 8002344:	d1eb      	bne.n	800231e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	429a      	cmp	r2, r3
 8002360:	d208      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f023 020f 	bic.w	r2, r3, #15
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x244>)
 8002370:	4313      	orrs	r3, r2
 8002372:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d214      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 020f 	bic.w	r2, r3, #15
 800238a:	4906      	ldr	r1, [pc, #24]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_RCC_ClockConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e086      	b.n	80024b2 <HAL_RCC_ClockConfig+0x34e>
 80023a4:	52002000 	.word	0x52002000
 80023a8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d208      	bcs.n	80023da <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	4939      	ldr	r1, [pc, #228]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d010      	beq.n	8002408 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d208      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	492e      	ldr	r1, [pc, #184]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002404:	4313      	orrs	r3, r2
 8002406:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d010      	beq.n	8002436 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002420:	429a      	cmp	r2, r3
 8002422:	d208      	bcs.n	8002436 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002432:	4313      	orrs	r3, r2
 8002434:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d010      	beq.n	8002464 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800244e:	429a      	cmp	r2, r3
 8002450:	d208      	bcs.n	8002464 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4917      	ldr	r1, [pc, #92]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002460:	4313      	orrs	r3, r2
 8002462:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002464:	f000 f834 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	4912      	ldr	r1, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x35c>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
 8002480:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x358>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_RCC_ClockConfig+0x35c>)
 800248c:	5cd3      	ldrb	r3, [r2, r3]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x360>)
 800249a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x364>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x368>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe faa0 	bl	80009ec <HAL_InitTick>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	58024400 	.word	0x58024400
 80024c0:	08003994 	.word	0x08003994
 80024c4:	24000004 	.word	0x24000004
 80024c8:	24000000 	.word	0x24000000
 80024cc:	24000008 	.word	0x24000008

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d6:	4bb3      	ldr	r3, [pc, #716]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024de:	2b18      	cmp	r3, #24
 80024e0:	f200 8155 	bhi.w	800278e <HAL_RCC_GetSysClockFreq+0x2be>
 80024e4:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80024e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ea:	bf00      	nop
 80024ec:	08002551 	.word	0x08002551
 80024f0:	0800278f 	.word	0x0800278f
 80024f4:	0800278f 	.word	0x0800278f
 80024f8:	0800278f 	.word	0x0800278f
 80024fc:	0800278f 	.word	0x0800278f
 8002500:	0800278f 	.word	0x0800278f
 8002504:	0800278f 	.word	0x0800278f
 8002508:	0800278f 	.word	0x0800278f
 800250c:	08002577 	.word	0x08002577
 8002510:	0800278f 	.word	0x0800278f
 8002514:	0800278f 	.word	0x0800278f
 8002518:	0800278f 	.word	0x0800278f
 800251c:	0800278f 	.word	0x0800278f
 8002520:	0800278f 	.word	0x0800278f
 8002524:	0800278f 	.word	0x0800278f
 8002528:	0800278f 	.word	0x0800278f
 800252c:	0800257d 	.word	0x0800257d
 8002530:	0800278f 	.word	0x0800278f
 8002534:	0800278f 	.word	0x0800278f
 8002538:	0800278f 	.word	0x0800278f
 800253c:	0800278f 	.word	0x0800278f
 8002540:	0800278f 	.word	0x0800278f
 8002544:	0800278f 	.word	0x0800278f
 8002548:	0800278f 	.word	0x0800278f
 800254c:	08002583 	.word	0x08002583
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002550:	4b94      	ldr	r3, [pc, #592]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b00      	cmp	r3, #0
 800255a:	d009      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800255c:	4b91      	ldr	r3, [pc, #580]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	08db      	lsrs	r3, r3, #3
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	4a90      	ldr	r2, [pc, #576]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
 800256c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800256e:	e111      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002570:	4b8d      	ldr	r3, [pc, #564]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002572:	61bb      	str	r3, [r7, #24]
    break;
 8002574:	e10e      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002576:	4b8d      	ldr	r3, [pc, #564]	; (80027ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002578:	61bb      	str	r3, [r7, #24]
    break;
 800257a:	e10b      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800257c:	4b8c      	ldr	r3, [pc, #560]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800257e:	61bb      	str	r3, [r7, #24]
    break;
 8002580:	e108      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002582:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800258c:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002596:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002598:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80025a2:	4b80      	ldr	r3, [pc, #512]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80e1 	beq.w	8002788 <HAL_RCC_GetSysClockFreq+0x2b8>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f000 8083 	beq.w	80026d4 <HAL_RCC_GetSysClockFreq+0x204>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	f200 80a1 	bhi.w	8002718 <HAL_RCC_GetSysClockFreq+0x248>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x114>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d056      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025e2:	e099      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025e4:	4b6f      	ldr	r3, [pc, #444]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d02d      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025f0:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	08db      	lsrs	r3, r3, #3
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	4a6b      	ldr	r2, [pc, #428]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800261a:	4b62      	ldr	r3, [pc, #392]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262a:	ed97 6a02 	vldr	s12, [r7, #8]
 800262e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800263a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800263e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002646:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800264a:	e087      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002656:	eddf 6a58 	vldr	s13, [pc, #352]	; 80027b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800265a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800266e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002672:	eddf 5a50 	vldr	s11, [pc, #320]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800267a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800267e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800268e:	e065      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80027bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800269e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a2:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026aa:	ee07 3a90 	vmov	s15, r3
 80026ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026d2:	e043      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80027c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ee:	ee07 3a90 	vmov	s15, r3
 80026f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800270a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800270e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002716:	e021      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002722:	eddf 6a26 	vldr	s13, [pc, #152]	; 80027bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273a:	ed97 6a02 	vldr	s12, [r7, #8]
 800273e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80027b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800274a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800274e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800275a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	0a5b      	lsrs	r3, r3, #9
 8002762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002766:	3301      	adds	r3, #1
 8002768:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002774:	edd7 6a07 	vldr	s13, [r7, #28]
 8002778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800277c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002780:	ee17 3a90 	vmov	r3, s15
 8002784:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002786:	e005      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
    break;
 800278c:	e002      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002790:	61bb      	str	r3, [r7, #24]
    break;
 8002792:	bf00      	nop
  }

  return sysclockfreq;
 8002794:	69bb      	ldr	r3, [r7, #24]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	58024400 	.word	0x58024400
 80027a8:	03d09000 	.word	0x03d09000
 80027ac:	003d0900 	.word	0x003d0900
 80027b0:	017d7840 	.word	0x017d7840
 80027b4:	46000000 	.word	0x46000000
 80027b8:	4c742400 	.word	0x4c742400
 80027bc:	4a742400 	.word	0x4a742400
 80027c0:	4bbebc20 	.word	0x4bbebc20

080027c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027cc:	2300      	movs	r3, #0
 80027ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d0:	2300      	movs	r3, #0
 80027d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d03f      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027e8:	d02a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027ee:	d824      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f4:	d018      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027fa:	d81e      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002804:	d007      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002806:	e018      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002808:	4ba3      	ldr	r3, [pc, #652]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	4aa2      	ldr	r2, [pc, #648]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002814:	e015      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2102      	movs	r1, #2
 800281c:	4618      	mov	r0, r3
 800281e:	f000 ff17 	bl	8003650 <RCCEx_PLL2_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002826:	e00c      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3324      	adds	r3, #36	; 0x24
 800282c:	2102      	movs	r1, #2
 800282e:	4618      	mov	r0, r3
 8002830:	f000 ffc0 	bl	80037b4 <RCCEx_PLL3_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002838:	e003      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
      break;
 800283e:	e000      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002848:	4b93      	ldr	r3, [pc, #588]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800284a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002854:	4990      	ldr	r1, [pc, #576]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	650b      	str	r3, [r1, #80]	; 0x50
 800285a:	e001      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d03d      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	2b04      	cmp	r3, #4
 8002872:	d826      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	08002891 	.word	0x08002891
 8002880:	0800289f 	.word	0x0800289f
 8002884:	080028b1 	.word	0x080028b1
 8002888:	080028c9 	.word	0x080028c9
 800288c:	080028c9 	.word	0x080028c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002890:	4b81      	ldr	r3, [pc, #516]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	4a80      	ldr	r2, [pc, #512]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800289c:	e015      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fed3 	bl	8003650 <RCCEx_PLL2_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028ae:	e00c      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3324      	adds	r3, #36	; 0x24
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 ff7c 	bl	80037b4 <RCCEx_PLL3_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028c0:	e003      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
      break;
 80028c6:	e000      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80028c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028d0:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	f023 0207 	bic.w	r2, r3, #7
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	496e      	ldr	r1, [pc, #440]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	650b      	str	r3, [r1, #80]	; 0x50
 80028e2:	e001      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d042      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028fc:	d02b      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80028fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002902:	d825      	bhi.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002904:	2bc0      	cmp	r3, #192	; 0xc0
 8002906:	d028      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002908:	2bc0      	cmp	r3, #192	; 0xc0
 800290a:	d821      	bhi.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	d016      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002910:	2b80      	cmp	r3, #128	; 0x80
 8002912:	d81d      	bhi.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d007      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800291c:	e018      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291e:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	4a5d      	ldr	r2, [pc, #372]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002928:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800292a:	e017      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fe8c 	bl	8003650 <RCCEx_PLL2_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800293c:	e00e      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3324      	adds	r3, #36	; 0x24
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f000 ff35 	bl	80037b4 <RCCEx_PLL3_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800294e:	e005      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	75fb      	strb	r3, [r7, #23]
      break;
 8002954:	e002      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800295a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002962:	4b4d      	ldr	r3, [pc, #308]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002966:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	494a      	ldr	r1, [pc, #296]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	650b      	str	r3, [r1, #80]	; 0x50
 8002974:	e001      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002982:	2b00      	cmp	r3, #0
 8002984:	d049      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800298c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002990:	d030      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002996:	d82a      	bhi.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002998:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800299c:	d02c      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800299e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029a2:	d824      	bhi.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a8:	d018      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80029aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ae:	d81e      	bhi.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80029b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029b8:	d007      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80029ba:	e018      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029bc:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	4a35      	ldr	r2, [pc, #212]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029c8:	e017      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fe3d 	bl	8003650 <RCCEx_PLL2_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80029da:	e00e      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3324      	adds	r3, #36	; 0x24
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fee6 	bl	80037b4 <RCCEx_PLL3_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029ec:	e005      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
      break;
 80029f2:	e002      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029f4:	bf00      	nop
 80029f6:	e000      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a0e:	4922      	ldr	r1, [pc, #136]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	658b      	str	r3, [r1, #88]	; 0x58
 8002a14:	e001      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d04b      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a30:	d030      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a36:	d82a      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a3c:	d02e      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a42:	d824      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a48:	d018      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a4e:	d81e      	bhi.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a58:	d007      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a5a:	e018      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a68:	e019      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fded 	bl	8003650 <RCCEx_PLL2_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a7a:	e010      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3324      	adds	r3, #36	; 0x24
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fe96 	bl	80037b4 <RCCEx_PLL3_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a8c:	e007      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
      break;
 8002a92:	e004      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002a94:	bf00      	nop
 8002a96:	e002      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002a98:	58024400 	.word	0x58024400
      break;
 8002a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002aa4:	4b99      	ldr	r3, [pc, #612]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ab2:	4996      	ldr	r1, [pc, #600]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	658b      	str	r3, [r1, #88]	; 0x58
 8002ab8:	e001      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d032      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ace:	2b30      	cmp	r3, #48	; 0x30
 8002ad0:	d01c      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002ad2:	2b30      	cmp	r3, #48	; 0x30
 8002ad4:	d817      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d00c      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d813      	bhi.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d10f      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae6:	4b89      	ldr	r3, [pc, #548]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	4a88      	ldr	r2, [pc, #544]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002af2:	e00e      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3304      	adds	r3, #4
 8002af8:	2102      	movs	r1, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fda8 	bl	8003650 <RCCEx_PLL2_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b04:	e005      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002b0c:	bf00      	nop
 8002b0e:	e000      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b18:	4b7c      	ldr	r3, [pc, #496]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b24:	4979      	ldr	r1, [pc, #484]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b2a:	e001      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d047      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b44:	d030      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b4a:	d82a      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b50:	d02c      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b56:	d824      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d018      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b62:	d81e      	bhi.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6c:	d007      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002b6e:	e018      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b70:	4b66      	ldr	r3, [pc, #408]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a65      	ldr	r2, [pc, #404]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b7c:	e017      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fd63 	bl	8003650 <RCCEx_PLL2_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b8e:	e00e      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3324      	adds	r3, #36	; 0x24
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fe0c 	bl	80037b4 <RCCEx_PLL3_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ba0:	e005      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba6:	e002      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002bb4:	4b55      	ldr	r3, [pc, #340]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	4952      	ldr	r1, [pc, #328]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8002bc6:	e001      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d049      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d02e      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002be2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be6:	d828      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002be8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bec:	d02a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002bee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bf2:	d822      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bf4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bf8:	d026      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002bfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bfe:	d81c      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c04:	d010      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c0a:	d816      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01d      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d111      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fd17 	bl	8003650 <RCCEx_PLL2_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c26:	e012      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3324      	adds	r3, #36	; 0x24
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fdc0 	bl	80037b4 <RCCEx_PLL3_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002c38:	e009      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c3e:	e006      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c40:	bf00      	nop
 8002c42:	e004      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c44:	bf00      	nop
 8002c46:	e002      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c58:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c60:	492a      	ldr	r1, [pc, #168]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	650b      	str	r3, [r1, #80]	; 0x50
 8002c66:	e001      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d04d      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c82:	d02e      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c88:	d828      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8e:	d02a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d822      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c9a:	d026      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002c9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ca0:	d81c      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca6:	d010      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cac:	d816      	bhi.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01d      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fcc6 	bl	8003650 <RCCEx_PLL2_Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cc8:	e012      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3324      	adds	r3, #36	; 0x24
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fd6f 	bl	80037b4 <RCCEx_PLL3_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002cda:	e009      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	75fb      	strb	r3, [r7, #23]
      break;
 8002ce0:	e006      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e004      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e002      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002cea:	bf00      	nop
 8002cec:	e000      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d04:	4901      	ldr	r1, [pc, #4]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	658b      	str	r3, [r1, #88]	; 0x58
 8002d0a:	e003      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d02f      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d28:	d00e      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d2e:	d814      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d015      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002d34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d38:	d10f      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d3a:	4baf      	ldr	r3, [pc, #700]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	4aae      	ldr	r2, [pc, #696]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d46:	e00c      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fc7e 	bl	8003650 <RCCEx_PLL2_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d68:	4ba3      	ldr	r3, [pc, #652]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d74:	49a0      	ldr	r1, [pc, #640]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	650b      	str	r3, [r1, #80]	; 0x50
 8002d7a:	e001      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d032      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d81b      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002d94:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002dd3 	.word	0x08002dd3
 8002da0:	08002dad 	.word	0x08002dad
 8002da4:	08002dbb 	.word	0x08002dbb
 8002da8:	08002dd3 	.word	0x08002dd3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dac:	4b92      	ldr	r3, [pc, #584]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	4a91      	ldr	r2, [pc, #580]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002db8:	e00c      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 fc45 	bl	8003650 <RCCEx_PLL2_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002dca:	e003      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	75fb      	strb	r3, [r7, #23]
      break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002dda:	4b87      	ldr	r3, [pc, #540]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4984      	ldr	r1, [pc, #528]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002dec:	e001      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8086 	beq.w	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a7d      	ldr	r2, [pc, #500]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e0c:	f7fd fe38 	bl	8000a80 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e12:	e009      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7fd fe34 	bl	8000a80 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d902      	bls.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	75fb      	strb	r3, [r7, #23]
        break;
 8002e26:	e005      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e28:	4b74      	ldr	r3, [pc, #464]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d166      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e3a:	4b6f      	ldr	r3, [pc, #444]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e44:	4053      	eors	r3, r2
 8002e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d013      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e58:	4b67      	ldr	r3, [pc, #412]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a66      	ldr	r2, [pc, #408]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e64:	4b64      	ldr	r3, [pc, #400]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e70:	4a61      	ldr	r2, [pc, #388]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e80:	d115      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e82:	f7fd fdfd 	bl	8000a80 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e88:	e00b      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fd fdf9 	bl	8000a80 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d902      	bls.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	75fb      	strb	r3, [r7, #23]
            break;
 8002ea0:	e005      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea2:	4b55      	ldr	r3, [pc, #340]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0ed      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d126      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002ec4:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ed2:	0919      	lsrs	r1, r3, #4
 8002ed4:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	4947      	ldr	r1, [pc, #284]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	610b      	str	r3, [r1, #16]
 8002ede:	e005      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002ee0:	4b45      	ldr	r3, [pc, #276]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	4a44      	ldr	r2, [pc, #272]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ee6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002eea:	6113      	str	r3, [r2, #16]
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efa:	493f      	ldr	r1, [pc, #252]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	670b      	str	r3, [r1, #112]	; 0x70
 8002f00:	e004      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	75bb      	strb	r3, [r7, #22]
 8002f06:	e001      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8085 	beq.w	8003024 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f1e:	2b28      	cmp	r3, #40	; 0x28
 8002f20:	d866      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08003005 	.word	0x08003005
 8002f2c:	08002ff1 	.word	0x08002ff1
 8002f30:	08002ff1 	.word	0x08002ff1
 8002f34:	08002ff1 	.word	0x08002ff1
 8002f38:	08002ff1 	.word	0x08002ff1
 8002f3c:	08002ff1 	.word	0x08002ff1
 8002f40:	08002ff1 	.word	0x08002ff1
 8002f44:	08002ff1 	.word	0x08002ff1
 8002f48:	08002fcd 	.word	0x08002fcd
 8002f4c:	08002ff1 	.word	0x08002ff1
 8002f50:	08002ff1 	.word	0x08002ff1
 8002f54:	08002ff1 	.word	0x08002ff1
 8002f58:	08002ff1 	.word	0x08002ff1
 8002f5c:	08002ff1 	.word	0x08002ff1
 8002f60:	08002ff1 	.word	0x08002ff1
 8002f64:	08002ff1 	.word	0x08002ff1
 8002f68:	08002fdf 	.word	0x08002fdf
 8002f6c:	08002ff1 	.word	0x08002ff1
 8002f70:	08002ff1 	.word	0x08002ff1
 8002f74:	08002ff1 	.word	0x08002ff1
 8002f78:	08002ff1 	.word	0x08002ff1
 8002f7c:	08002ff1 	.word	0x08002ff1
 8002f80:	08002ff1 	.word	0x08002ff1
 8002f84:	08002ff1 	.word	0x08002ff1
 8002f88:	08003005 	.word	0x08003005
 8002f8c:	08002ff1 	.word	0x08002ff1
 8002f90:	08002ff1 	.word	0x08002ff1
 8002f94:	08002ff1 	.word	0x08002ff1
 8002f98:	08002ff1 	.word	0x08002ff1
 8002f9c:	08002ff1 	.word	0x08002ff1
 8002fa0:	08002ff1 	.word	0x08002ff1
 8002fa4:	08002ff1 	.word	0x08002ff1
 8002fa8:	08003005 	.word	0x08003005
 8002fac:	08002ff1 	.word	0x08002ff1
 8002fb0:	08002ff1 	.word	0x08002ff1
 8002fb4:	08002ff1 	.word	0x08002ff1
 8002fb8:	08002ff1 	.word	0x08002ff1
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08002ff1 	.word	0x08002ff1
 8002fc4:	08002ff1 	.word	0x08002ff1
 8002fc8:	08003005 	.word	0x08003005
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb3c 	bl	8003650 <RCCEx_PLL2_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fdc:	e013      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3324      	adds	r3, #36	; 0x24
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fbe5 	bl	80037b4 <RCCEx_PLL3_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002fee:	e00a      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff4:	e007      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ff6:	bf00      	nop
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	58024800 	.word	0x58024800
 8003000:	00ffffcf 	.word	0x00ffffcf
      break;
 8003004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800300c:	4b96      	ldr	r3, [pc, #600]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003018:	4993      	ldr	r1, [pc, #588]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	654b      	str	r3, [r1, #84]	; 0x54
 800301e:	e001      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d038      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003034:	2b05      	cmp	r3, #5
 8003036:	d821      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003083 	.word	0x08003083
 8003044:	08003059 	.word	0x08003059
 8003048:	0800306b 	.word	0x0800306b
 800304c:	08003083 	.word	0x08003083
 8003050:	08003083 	.word	0x08003083
 8003054:	08003083 	.word	0x08003083
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f000 faf6 	bl	8003650 <RCCEx_PLL2_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003068:	e00c      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3324      	adds	r3, #36	; 0x24
 800306e:	2101      	movs	r1, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fb9f 	bl	80037b4 <RCCEx_PLL3_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800307a:	e003      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	75fb      	strb	r3, [r7, #23]
      break;
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800308a:	4b77      	ldr	r3, [pc, #476]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	4974      	ldr	r1, [pc, #464]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	654b      	str	r3, [r1, #84]	; 0x54
 800309c:	e001      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d03a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d821      	bhi.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x938>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	08003103 	.word	0x08003103
 80030c4:	080030d9 	.word	0x080030d9
 80030c8:	080030eb 	.word	0x080030eb
 80030cc:	08003103 	.word	0x08003103
 80030d0:	08003103 	.word	0x08003103
 80030d4:	08003103 	.word	0x08003103
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	2101      	movs	r1, #1
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fab6 	bl	8003650 <RCCEx_PLL2_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030e8:	e00c      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3324      	adds	r3, #36	; 0x24
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fb5f 	bl	80037b4 <RCCEx_PLL3_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800310a:	4b57      	ldr	r3, [pc, #348]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	4953      	ldr	r1, [pc, #332]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	658b      	str	r3, [r1, #88]	; 0x58
 800311e:	e001      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d04b      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800313a:	d02e      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800313c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003140:	d828      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d02a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314c:	d822      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800314e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003152:	d026      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003154:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003158:	d81c      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800315a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315e:	d010      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003164:	d816      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01d      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800316a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800316e:	d111      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fa6a 	bl	8003650 <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003180:	e012      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3324      	adds	r3, #36	; 0x24
 8003186:	2102      	movs	r1, #2
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fb13 	bl	80037b4 <RCCEx_PLL3_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003192:	e009      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	75fb      	strb	r3, [r7, #23]
      break;
 8003198:	e006      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800319a:	bf00      	nop
 800319c:	e004      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800319e:	bf00      	nop
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80031a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031bc:	492a      	ldr	r1, [pc, #168]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	654b      	str	r3, [r1, #84]	; 0x54
 80031c2:	e001      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d04d      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031de:	d02e      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80031e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031e4:	d828      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ea:	d02a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80031ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f0:	d822      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f6:	d026      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80031f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031fc:	d81c      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003202:	d010      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003208:	d816      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01d      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800320e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003212:	d111      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fa18 	bl	8003650 <RCCEx_PLL2_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003224:	e012      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3324      	adds	r3, #36	; 0x24
 800322a:	2102      	movs	r1, #2
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fac1 	bl	80037b4 <RCCEx_PLL3_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003236:	e009      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	75fb      	strb	r3, [r7, #23]
      break;
 800323c:	e006      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800323e:	bf00      	nop
 8003240:	e004      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003242:	bf00      	nop
 8003244:	e002      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800324a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003260:	4901      	ldr	r1, [pc, #4]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	658b      	str	r3, [r1, #88]	; 0x58
 8003266:	e003      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b00      	cmp	r3, #0
 800327a:	d04b      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003282:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003286:	d02e      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003288:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800328c:	d828      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800328e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003292:	d02a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003298:	d822      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800329a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800329e:	d026      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80032a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80032a4:	d81c      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80032a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032aa:	d010      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80032ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032b0:	d816      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01d      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80032b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ba:	d111      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f9c4 	bl	8003650 <RCCEx_PLL2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032cc:	e012      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3324      	adds	r3, #36	; 0x24
 80032d2:	2102      	movs	r1, #2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fa6d 	bl	80037b4 <RCCEx_PLL3_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80032de:	e009      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	75fb      	strb	r3, [r7, #23]
      break;
 80032e4:	e006      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032e6:	bf00      	nop
 80032e8:	e004      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032ea:	bf00      	nop
 80032ec:	e002      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032ee:	bf00      	nop
 80032f0:	e000      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032fa:	4b9d      	ldr	r3, [pc, #628]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003308:	4999      	ldr	r1, [pc, #612]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800330a:	4313      	orrs	r3, r2
 800330c:	658b      	str	r3, [r1, #88]	; 0x58
 800330e:	e001      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d10a      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3324      	adds	r3, #36	; 0x24
 8003330:	2102      	movs	r1, #2
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fa3e 	bl	80037b4 <RCCEx_PLL3_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003342:	4b8b      	ldr	r3, [pc, #556]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003350:	4987      	ldr	r1, [pc, #540]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003352:	4313      	orrs	r3, r2
 8003354:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336c:	d10a      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3324      	adds	r3, #36	; 0x24
 8003372:	2102      	movs	r1, #2
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fa1d 	bl	80037b4 <RCCEx_PLL3_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003384:	4b7a      	ldr	r3, [pc, #488]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003392:	4977      	ldr	r1, [pc, #476]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003394:	4313      	orrs	r3, r2
 8003396:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d034      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ae:	d01d      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80033b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033b4:	d817      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033be:	d009      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80033c0:	e011      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f941 	bl	8003650 <RCCEx_PLL2_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033d2:	e00c      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3324      	adds	r3, #36	; 0x24
 80033d8:	2102      	movs	r1, #2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f9ea 	bl	80037b4 <RCCEx_PLL3_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033e4:	e003      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
      break;
 80033ea:	e000      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80033ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033f4:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003402:	495b      	ldr	r1, [pc, #364]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003404:	4313      	orrs	r3, r2
 8003406:	658b      	str	r3, [r1, #88]	; 0x58
 8003408:	e001      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d033      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003420:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003424:	d01c      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800342a:	d816      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800342c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003430:	d003      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003436:	d007      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003438:	e00f      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343a:	4b4d      	ldr	r3, [pc, #308]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	4a4c      	ldr	r2, [pc, #304]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003444:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003446:	e00c      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	2101      	movs	r1, #1
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f9b0 	bl	80037b4 <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003458:	e003      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
      break;
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003468:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003476:	493e      	ldr	r1, [pc, #248]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003478:	4313      	orrs	r3, r2
 800347a:	654b      	str	r3, [r1, #84]	; 0x54
 800347c:	e001      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d029      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349a:	d007      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800349c:	e00f      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800349e:	4b34      	ldr	r3, [pc, #208]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	4a33      	ldr	r2, [pc, #204]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034aa:	e00b      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	2102      	movs	r1, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f8cc 	bl	8003650 <RCCEx_PLL2_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80034bc:	e002      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
      break;
 80034c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034ca:	4b29      	ldr	r3, [pc, #164]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	4926      	ldr	r1, [pc, #152]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034dc:	e001      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3324      	adds	r3, #36	; 0x24
 80034f2:	2102      	movs	r1, #2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f95d 	bl	80037b4 <RCCEx_PLL3_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d033      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003518:	d017      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800351a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800351e:	d811      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003524:	d013      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352a:	d80b      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003534:	d106      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800353c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003540:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003542:	e007      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	75fb      	strb	r3, [r7, #23]
      break;
 8003548:	e004      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800354a:	bf00      	nop
 800354c:	e002      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10c      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003566:	4902      	ldr	r1, [pc, #8]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003568:	4313      	orrs	r3, r2
 800356a:	654b      	str	r3, [r1, #84]	; 0x54
 800356c:	e004      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800356e:	bf00      	nop
 8003570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	492e      	ldr	r1, [pc, #184]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003592:	4313      	orrs	r3, r2
 8003594:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035a2:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035b0:	4926      	ldr	r1, [pc, #152]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035c2:	4b22      	ldr	r3, [pc, #136]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ce:	491f      	ldr	r1, [pc, #124]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4a19      	ldr	r2, [pc, #100]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035ea:	6113      	str	r3, [r2, #16]
 80035ec:	4b17      	ldr	r3, [pc, #92]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035f6:	4915      	ldr	r1, [pc, #84]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	da08      	bge.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003608:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	490e      	ldr	r1, [pc, #56]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003612:	4313      	orrs	r3, r2
 8003614:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	4906      	ldr	r1, [pc, #24]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003632:	4313      	orrs	r3, r2
 8003634:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003636:	7dbb      	ldrb	r3, [r7, #22]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	58024400 	.word	0x58024400

08003650 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800365e:	4b53      	ldr	r3, [pc, #332]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b03      	cmp	r3, #3
 8003668:	d101      	bne.n	800366e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e099      	b.n	80037a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800366e:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4e      	ldr	r2, [pc, #312]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003674:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367a:	f7fd fa01 	bl	8000a80 <HAL_GetTick>
 800367e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003680:	e008      	b.n	8003694 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003682:	f7fd f9fd 	bl	8000a80 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e086      	b.n	80037a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f0      	bne.n	8003682 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036a0:	4b42      	ldr	r3, [pc, #264]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	031b      	lsls	r3, r3, #12
 80036ae:	493f      	ldr	r1, [pc, #252]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	628b      	str	r3, [r1, #40]	; 0x28
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	025b      	lsls	r3, r3, #9
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	3b01      	subs	r3, #1
 80036de:	061b      	lsls	r3, r3, #24
 80036e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036e4:	4931      	ldr	r1, [pc, #196]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80036ea:	4b30      	ldr	r3, [pc, #192]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	492d      	ldr	r1, [pc, #180]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	f023 0220 	bic.w	r2, r3, #32
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	4928      	ldr	r1, [pc, #160]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800370e:	4b27      	ldr	r3, [pc, #156]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	4a26      	ldr	r2, [pc, #152]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003714:	f023 0310 	bic.w	r3, r3, #16
 8003718:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 800371c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800371e:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <RCCEx_PLL2_Config+0x160>)
 8003720:	4013      	ands	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	69d2      	ldr	r2, [r2, #28]
 8003726:	00d2      	lsls	r2, r2, #3
 8003728:	4920      	ldr	r1, [pc, #128]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800372e:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003734:	f043 0310 	orr.w	r3, r3, #16
 8003738:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	4a19      	ldr	r2, [pc, #100]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003746:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800374a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800374c:	e00f      	b.n	800376e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d106      	bne.n	8003762 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003754:	4b15      	ldr	r3, [pc, #84]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 800375a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003760:	e005      	b.n	800376e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800376c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377a:	f7fd f981 	bl	8000a80 <HAL_GetTick>
 800377e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003780:	e008      	b.n	8003794 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003782:	f7fd f97d 	bl	8000a80 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e006      	b.n	80037a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <RCCEx_PLL2_Config+0x15c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	58024400 	.word	0x58024400
 80037b0:	ffff0007 	.word	0xffff0007

080037b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037c2:	4b53      	ldr	r3, [pc, #332]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d101      	bne.n	80037d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e099      	b.n	8003906 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80037d2:	4b4f      	ldr	r3, [pc, #316]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4e      	ldr	r2, [pc, #312]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80037d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037de:	f7fd f94f 	bl	8000a80 <HAL_GetTick>
 80037e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037e6:	f7fd f94b 	bl	8000a80 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e086      	b.n	8003906 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037f8:	4b45      	ldr	r3, [pc, #276]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003804:	4b42      	ldr	r3, [pc, #264]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	051b      	lsls	r3, r3, #20
 8003812:	493f      	ldr	r1, [pc, #252]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	628b      	str	r3, [r1, #40]	; 0x28
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	3b01      	subs	r3, #1
 800381e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	025b      	lsls	r3, r3, #9
 800382a:	b29b      	uxth	r3, r3
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	3b01      	subs	r3, #1
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	3b01      	subs	r3, #1
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003848:	4931      	ldr	r1, [pc, #196]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 800384a:	4313      	orrs	r3, r2
 800384c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800384e:	4b30      	ldr	r3, [pc, #192]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	492d      	ldr	r1, [pc, #180]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 800385c:	4313      	orrs	r3, r2
 800385e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4928      	ldr	r1, [pc, #160]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4a26      	ldr	r2, [pc, #152]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800387c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003882:	4b24      	ldr	r3, [pc, #144]	; (8003914 <RCCEx_PLL3_Config+0x160>)
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	69d2      	ldr	r2, [r2, #28]
 800388a:	00d2      	lsls	r2, r2, #3
 800388c:	4920      	ldr	r1, [pc, #128]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003892:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038a4:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038b0:	e00f      	b.n	80038d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038c4:	e005      	b.n	80038d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80038c6:	4b12      	ldr	r3, [pc, #72]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	4a11      	ldr	r2, [pc, #68]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038de:	f7fd f8cf 	bl	8000a80 <HAL_GetTick>
 80038e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038e4:	e008      	b.n	80038f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80038e6:	f7fd f8cb 	bl	8000a80 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e006      	b.n	8003906 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <RCCEx_PLL3_Config+0x15c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	58024400 	.word	0x58024400
 8003914:	ffff0007 	.word	0xffff0007

08003918 <__libc_init_array>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	4d0d      	ldr	r5, [pc, #52]	; (8003950 <__libc_init_array+0x38>)
 800391c:	4c0d      	ldr	r4, [pc, #52]	; (8003954 <__libc_init_array+0x3c>)
 800391e:	1b64      	subs	r4, r4, r5
 8003920:	10a4      	asrs	r4, r4, #2
 8003922:	2600      	movs	r6, #0
 8003924:	42a6      	cmp	r6, r4
 8003926:	d109      	bne.n	800393c <__libc_init_array+0x24>
 8003928:	4d0b      	ldr	r5, [pc, #44]	; (8003958 <__libc_init_array+0x40>)
 800392a:	4c0c      	ldr	r4, [pc, #48]	; (800395c <__libc_init_array+0x44>)
 800392c:	f000 f820 	bl	8003970 <_init>
 8003930:	1b64      	subs	r4, r4, r5
 8003932:	10a4      	asrs	r4, r4, #2
 8003934:	2600      	movs	r6, #0
 8003936:	42a6      	cmp	r6, r4
 8003938:	d105      	bne.n	8003946 <__libc_init_array+0x2e>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003940:	4798      	blx	r3
 8003942:	3601      	adds	r6, #1
 8003944:	e7ee      	b.n	8003924 <__libc_init_array+0xc>
 8003946:	f855 3b04 	ldr.w	r3, [r5], #4
 800394a:	4798      	blx	r3
 800394c:	3601      	adds	r6, #1
 800394e:	e7f2      	b.n	8003936 <__libc_init_array+0x1e>
 8003950:	080039a4 	.word	0x080039a4
 8003954:	080039a4 	.word	0x080039a4
 8003958:	080039a4 	.word	0x080039a4
 800395c:	080039a8 	.word	0x080039a8

08003960 <memset>:
 8003960:	4402      	add	r2, r0
 8003962:	4603      	mov	r3, r0
 8003964:	4293      	cmp	r3, r2
 8003966:	d100      	bne.n	800396a <memset+0xa>
 8003968:	4770      	bx	lr
 800396a:	f803 1b01 	strb.w	r1, [r3], #1
 800396e:	e7f9      	b.n	8003964 <memset+0x4>

08003970 <_init>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	bf00      	nop
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr

0800397c <_fini>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	bf00      	nop
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr
